<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cornerboxes</title>
    <link>https://cornerboxes.com/</link>
    <description>Recent content on cornerboxes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 08 Oct 2023 14:14:23 +0300</lastBuildDate><atom:link href="https://cornerboxes.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Part 2] Technical Implementation</title>
      <link>https://cornerboxes.com/projects/lms/2/</link>
      <pubDate>Sun, 08 Oct 2023 14:14:23 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/lms/2/</guid>
      <description>To recap, the requirements I set for this systems are the following:
Be digital. Support multiple devices and syncing. Allow the user to remain in full control of their data. Be easy to set up. Being Digital In order to tackle requirements 2 and 3, requirement 1 will have to be fulfilled. In other words, the system will have to be bundled into an app. As most people already have their phones on them at all times, there is no more convenient option than just using an app and not needing to bring any additional equipment with oneself on the go.</description>
      <content:encoded><![CDATA[<p>To recap, the requirements I set for this systems are the following:</p>
<ol>
<li>Be digital.</li>
<li>Support multiple devices and syncing.</li>
<li>Allow the user to remain in full control of their data.</li>
<li>Be easy to set up.</li>
</ol>
<h1 id="being-digital">Being Digital</h1>
<p>In order to tackle requirements 2 and 3, requirement 1 will have to be fulfilled. In other words, the system will have to be bundled into an app. As most people already have their phones on them at all times, there is no more convenient option than just using an app and not needing to bring any additional equipment with oneself on the go.</p>
<h1 id="multi-device-support">Multi-device Support</h1>
<p>For the app to have multi-device support (first part of requirement 2), I <em>could</em> create 3-4 different native implementations for each type of device, but that would be far too much work. Instead, using a cross-platform framework of some kind would be more ideal. After some research, my options are the following:</p>
<ul>
<li>Create a web app using a JavaScript framework (React, Vue) then turn it into mobile app using Electron or Capacitor.</li>
<li>Use a cross-platform framework like Flutter or React Native.</li>
</ul>
<p>Since I&rsquo;ve previously built applications with Flutter before, I will be using it as my framework of choice. However, my previous applications were quite simple in comparison with what I&rsquo;m trying to achieve with this project, therefore I will be making several sub-projects to get the hang of it in the process.</p>
<p>However, going with Flutter has a downside that may affect  the third requirement: telemetry. As Google is the main creator of Flutter, there may be some hidden telemetry baked into Flutter, causing the users&rsquo; data to be slightly compromised. Despite this, I believe I will still have to stick with Flutter, as using any alternative approach would slow down the development process. I will however manually disable as much telemetry as I can.</p>
<h1 id="syncing">Syncing</h1>
<p>As for the second part of requirement 2, that is, data syncing, there are two options:</p>
<ol>
<li>Using a peer-to-peer synchronization system like <a href="https://syncthing.net/">Syncthing</a>.</li>
<li>Using a cloud-hosted server to host a database, which is where the data will be stored.</li>
</ol>
<p>Here are some pros and cons of each.</p>
<h2 id="p2p-peer-to-peer-synchronization-system">P2P (Peer-to-Peer) synchronization system</h2>
<p>Pros:</p>
<ul>
<li>No server required = No extra costs</li>
<li>No authentication required.
<ul>
<li>As you have to manually connect your devices to one another directly, there is nearly no risk of someone stealing your data as all of it is stored solely on devices you own, and none of them require access to the internet to synchronize.</li>
</ul>
</li>
</ul>
<p>Cons:</p>
<ul>
<li>Connecting each device you have to each other will be tedious for the setup process.</li>
<li>Implementation will be quite difficult.</li>
<li>Conflict resolving may be common = worse ease of use
<ul>
<li>For example, you have two devices which are unable to sync with each other, but edit the same file on each of them. Then, sync the two devices. The two devices will have two files that were edited since they were last connected and do not know which one is the correct file.</li>
</ul>
</li>
<li>No redundancy.
<ul>
<li>For example, you left the house for a work trip with just your phone, but a week into your trip, your phone&rsquo;s storage gets corrupted. All the data you entered during the first week of the trip is now permanently gone.</li>
</ul>
</li>
</ul>
<h2 id="server-system">Server system</h2>
<p>Pros:</p>
<ul>
<li>Redundancy.
<ul>
<li>As all the data on any one device is kept in sync with the server, if the device fails, fetching the data from the server should restore what was lost.</li>
</ul>
</li>
<li>Simpler device-side setup.
<ul>
<li>Ideally, it will just be putting in the IP address (or domain name) of the server and authenticating yourself, and everything should be synced.</li>
</ul>
</li>
<li>Implementation may be simple.
<ul>
<li>There are several server database solutions available already with good documentation, and some even have specific guides for use with Flutter.</li>
</ul>
</li>
<li>Flexibility.
<ul>
<li>With a server, additional features become feasible. For example, multi-user support, which I plan to do as implementing authentication is already required for this implementation.</li>
</ul>
</li>
</ul>
<p>Cons:</p>
<ul>
<li>Cost.
<ul>
<li>An external server will be required. If using a low-cost VPS (Virtual Private Server), the costs may be about 4-5 euros a month.</li>
</ul>
</li>
<li>Potentially complex server-side setup.
<ul>
<li>There will likely be additional complexity from needing to set up the server securely, as the server is accessible by anyone on the internet.</li>
</ul>
</li>
</ul>
<h2 id="verdict">Verdict</h2>
<p>Based on the list above, I have decided to use a server-based setup, with the main convincing points being redundancy and flexibility. I feel like I can justify the cons with the following:</p>
<ul>
<li>Cost
<ul>
<li>Many current free digital productivity systems have catches to prevent abuse of their systems, and they make users pay for either higher limits or additional functionalities (like syncing). The same amount of money in their paid tiers tends to be enough to afford a low-cost VPS.</li>
</ul>
</li>
<li>Potentially complex server-side setup.
<ul>
<li>As this system is intended for my personal use, I personally don&rsquo;t mind the additional tinkering to get things up and running. However, if there is a future demand for it, I believe creating a script for a very quick setup experience on the server could be achievable. For example, something like the <a href="https://github.com/pterodactyl-installer/pterodactyl-installer">Pterodactyl setup script</a>, which drastically simplifies the setup for Pterodactyl.</li>
</ul>
</li>
</ul>
<h1 id="server-database">Server Database</h1>
<p>As using a server as a database is actually fairly common, there are ready-made solutions that are open-source. I previously hinted at this previously:</p>
<blockquote>
<p>There are several server database solutions available already with good documentation, and some even have specific guides for use with Flutter.</p>
</blockquote>
<p>Some may have heard of Google&rsquo;s Firebase, which I have used before. However, there are actually a fair amount of alternatives, and given Google&rsquo;s track record with telemetry, I think it&rsquo;d be wise to use something else.</p>
<p>Here&rsquo;s what I found:</p>
<ul>
<li><a href="https://pocketbase.io/">Pocketbase</a>
<ul>
<li>Pros:
<ul>
<li>One file, very simple.</li>
</ul>
</li>
<li>Cons:
<ul>
<li>Uses sqlite in the background, may not be the most performant.</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://supabase.com/">Supabase</a>
<ul>
<li>Pros:
<ul>
<li>Scales up very well.</li>
</ul>
</li>
<li>Cons:
<ul>
<li>More complex.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>I decided to try out Pocketbase because:</p>
<ul>
<li>Simple is best. I want to focus more of my time on creating good user-side applications and less time debugging the server-related code.</li>
<li>This system is intended for a very small group of people to use (1 person ideally, maybe 5-10 people max), which means the scalability of Supabase will likely not be very useful.</li>
<li>After checking out some <a href="https://github.com/pocketbase/benchmarks/blob/master/results/hetzner_cax11_cgo.md">benchmarks for Pocketbase</a>, it seems that creating thousands of posts will only take a few seconds, which is more than any individual (or small group of individuals) will need.</li>
</ul>
<h1 id="tldr">TL;DR</h1>
<ul>
<li>App framework: Flutter</li>
<li>Multi-device support implementation: Server
<ul>
<li>Server database (backend): Pocketbase</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 1] Origin</title>
      <link>https://cornerboxes.com/projects/lms/1/</link>
      <pubDate>Mon, 25 Sep 2023 14:21:51 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/lms/1/</guid>
      <description>Background I have rather terrible self-organizational skills. For the last 4-5 years, I&amp;rsquo;ve essentially been just winging it. To meet the deadlines and requirements given to me by life, I&amp;rsquo;ve been using solely a calendar (for tracking very important events) and sheer will. In a nutshell, I&amp;rsquo;ve just been controlled by the demands of life. Tasks are usually only done when the deadline is looming over me, and I have almost no hobbies.</description>
      <content:encoded><![CDATA[<h1 id="background">Background</h1>
<p>I have rather terrible self-organizational skills. For the last 4-5 years, I&rsquo;ve essentially been just winging it. To meet the deadlines and requirements given to me by life, I&rsquo;ve been using solely a calendar (for tracking very important events) and sheer will. In a nutshell, I&rsquo;ve just been controlled by the demands of life. Tasks are usually only done when the deadline is looming over me, and I have almost no hobbies. I do however manage to rapidly complete projects if a sudden wave of motivation hits me, but if hardships hit or it takes longer than expected, the project gets abandoned. And yes, having a heavy procrastination problem is a given.</p>
<p>However, there&rsquo;s a problem (if it wasn&rsquo;t glaringly obvious already). I&rsquo;m already in my 3rd year of university, and I probably should get my life together.</p>
<h1 id="brainstorming">Brainstorming</h1>
<p>To start, I began asking myself the question: &ldquo;How does one get organized?&rdquo;, which leads to &ldquo;What needs to be organized?&rdquo;.</p>
<h2 id="organize-what">Organize what?</h2>
<p>First, the obvious one: the baseline requirement of daily life is to be able to <strong>keep track of important appointments, tasks/assignments, and deadlines</strong>. For any individual, this is a fundamental need as there are usually direct consequences to not showing up on time to an important event or not completing something important in time.</p>
<p>The second thing that needs organization is <strong>knowledge</strong>. In modern times, I believe that it&rsquo;s almost a necessity to keep gaining more knowledge. Knowledge, and in turn, skills, are very important for the constantly-evolving world where being left behind might lead to life instability.</p>
<p>The third thing that, in my opinion, needs to be managed, is habits. In life, some things aren&rsquo;t under our control, and sometimes those things actually affect us. When it comes to things that have a mental effect on us, I think it&rsquo;s very important to ground ourselves mentally such that we can take care of ourselves despite the happenings of life. However, needing to intentionally pay attention to everything we need to do to take care of ourselves is very mentally demanding. Luckily, we humans have a nice built-in function: habits. By offloading these self-care tasks to our subconscious, it lets us save our mental energy for more cognitively demanding tasks in life that don&rsquo;t happen every day.</p>
<p>Having to manage habits might seem excessive, but I think it&rsquo;s very important in modern days also because of social media and similar digital applications that are designed to steal your attention away. They reinforce bad habits (like checking your social media right after dismissing your alarm) without us even noticing. Therefore, I believe a habit management system to <strong>intentionally</strong> build on good habits and break bad habits is very important.</p>
<h1 id="back-to-this-project">Back to this project</h1>
<p>This project aims to help manage the three things mentioned above. If those things are managed, life is managed. Therefore, this project is called the Life Management System (LMS).</p>
<p>Similarly, the three sub-components are called:</p>
<ul>
<li>Time/Task Management System (TTMS)</li>
<li>Information Management System (IMS)</li>
<li>Habit Management System (HMS)</li>
</ul>
<pre class="mermaid">flowchart LR
	subgraph LMS
	direction LR
	TTMS --- IMS
	IMS --- HMS
	HMS --- TTMS
	end
</pre>
<p>(I would&rsquo;ve liked to call IMS the &ldquo;Knowledge Management System,&rdquo; but having the abbreviation be &ldquo;KMS&rdquo; doesn&rsquo;t really sit well with me&hellip;)</p>
<p>Each sub-component will be its own project, and more details about how each thing is managed will be explained much more thoroughly in their corresponding projects.</p>
<h2 id="core-requirements">Core Requirements</h2>
<p>Although LMS may be considered solely the sum of its three sub-components, I want the whole system to have a heavy emphasis on convenience. After all, I don&rsquo;t want rely on or use something that is inconvenient. Therefore, all components in this system need to be digital.</p>
<p>Extending on that thought, the system should also be usable on several devices, and the data should be synced across all devices. This is because most people already have multiple devices, and it would be most convenient if the system (especially the TTMS and IMS) can be accessed from any one of them.</p>
<p>Additionally, as most people have a computer and a phone, the roles of the devices should be slightly different. A computer allows for more comfortable input, while the mobile device&rsquo;s small screen restricts what can be done on it. Therefore, the computer interface should prioritize making data input as comfortable as possible, while the mobile interface should prioritize data referencing (e.g., checking events is prioritized over adding events).</p>
<p>Furthermore, as this system will be dealing with quite a bit of important data, it is very important that the data remains fully under the user&rsquo;s control.</p>
<p>Finally, as convenience is important not only for daily usage but also the setup process, setting up the system should be simple and straightforward.</p>
<p>TL;DR, The system should:</p>
<ul>
<li>be digital.</li>
<li>support multiple devices and syncing.</li>
<li>allow the user to remain in full control of their data.</li>
<li>be easy to set up.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 3] Adding a Dongle</title>
      <link>https://cornerboxes.com/projects/swan40/3/</link>
      <pubDate>Fri, 15 Sep 2023 16:19:34 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/swan40/3/</guid>
      <description>Note: This isn&amp;rsquo;t going to be an explicit guide on how to add a dongle to any ZMK board. I will create a post for that later.
Background I&amp;rsquo;ve since daily driven the Swan40 for quite a while, and it&amp;rsquo;s been working perfectly&amp;hellip; on my desktop. Since it&amp;rsquo;s been working out so well, I wanted to make another one to have on-the-go, for use with my laptop. However, this is where some problems appeared.</description>
      <content:encoded><![CDATA[<p>Note: This isn&rsquo;t going to be an explicit guide on how to add a dongle to any ZMK board. I will create a post for that later.</p>
<h1 id="background">Background</h1>
<p>I&rsquo;ve since daily driven the Swan40 for quite a while, and it&rsquo;s been working perfectly&hellip; on my desktop. Since it&rsquo;s been working out so well, I wanted to make another one to have on-the-go, for use with my laptop. However, this is where some problems appeared.</p>
<p>For some context, my laptop is running a dual-boot configuration, with Windows 11 and Fedora (Kinoite 38). I primarily use Linux and only use Windows due to certain pieces of software not working great on Linux. It has an Intel AX200 combo wireless adapter (WiFi 5 + Bluetooth 5.2).</p>
<h2 id="no-connectivity">No connectivity</h2>
<p>Due to the Swan40 being a ZMK keyboard, it&rsquo;s main communication method with any computer is over BLE. However, when I tried to pair my laptop to my Swan40, the keyboard simply did not show up in the Bluetooth scans. The Bluetooth scans showed all other devices, just not my keyboard.</p>
<h2 id="troubleshooting">Troubleshooting</h2>
<p>I tried the following:</p>
<ul>
<li>Connecting on Windows
<ul>
<li>This worked, but I rarely use Windows. This does confirm that the adapter is capable of picking up BLE devices.</li>
</ul>
</li>
<li>Unpairing on Windows and attempting to pair on Linux
<ul>
<li>This did not work.</li>
</ul>
</li>
<li>Using Blueman, Bluez-tools, Bluetuith
<ul>
<li>Bluetuith was suggested by <a href="https://github.com/zmkfirmware/zmk/issues/1487#issuecomment-1625394710">this comment in a GitHub issue about Bluetooth connectivity</a></li>
<li>This also did not work, but it eliminates the possibility that KDE&rsquo;s Bluetooth settings are broken.</li>
</ul>
</li>
</ul>
<p>At this point, I&rsquo;d given up on finding an easy solution for fixing the connectivity issues.</p>
<p>It was time for a more drastic and experimental option.</p>
<h1 id="using-a-dongle">Using a Dongle</h1>
<p>I had stumbled upon <a href="https://www.xudongz.com/blog/2020/ergoblue/">Xudong Zheng&rsquo;s ErgoBlue 2 keyboard</a> which seems to use an nRF52840 dongle running ZMK to act as an intermediary between the keyboard halves and the computer, allowing the wireless keyboard to appear as a wired one in the computer.</p>
<h2 id="why">Why?</h2>
<p>After looking into the ErgoBlue and similar boards, I discovered the following pros and cons:</p>
<p>Pros:</p>
<ul>
<li>Power savings and even battery drain.
<ul>
<li>Both keyboard halves only need to send data, in contrast to the traditional wireless split where one half has to receive data from the other half and transmit data to the computer. (Assuming both halves now act as purely peripheral halves, the [ZMK power profiiler] estimates there will be approximately a 6-8x battery life improvement.)</li>
<li>Since both halves are essentially doing the same thing now, the power drain on each half is far more even, meaning I can charge both halves at the same time every time either is running low.</li>
</ul>
</li>
<li>No more Bluetooth pairing shenanigans.
<ul>
<li>All communication between the computer and keyboard occurs over USB with the dongle, and the dongle auto-pairs with the keyboard.</li>
<li>This makes the keyboard basically plug-and-play.</li>
</ul>
</li>
</ul>
<p>Cons:</p>
<ul>
<li>The dongle is rather bulky.
<ul>
<li>Unlike other wireless dongles I have (that use proprietary 2.4Ghz protocols), the nRF52840 dongle is really large since it has lots of pins which could be used. This all goes unused as I&rsquo;m solely using it as a wireless dongle.</li>
</ul>
</li>
<li>The dongle is super exposed.
<ul>
<li>All the little components and pads on the board are really exposed, which means it&rsquo;s rather susceptible to the elements. Not great for something I&rsquo;ll be carrying all over the place.</li>
</ul>
</li>
<li>I now have to carry around an easy-to-lose dongle.</li>
</ul>
<h2 id="dongle-ifying-the-swan40">Dongle-ifying the Swan40</h2>
<p>So, I got myself a pair of nRF52840 dongles (PCA100059, v2.1.1) for about 9€ a piece.</p>
<p>Unfortunately, as BLE dongles fro ZMK are still quite obscure, a tutorial doesn&rsquo;t really exist. I used the following projects as configuration reference:</p>
<ul>
<li><a href="https://github.com/aroum/zmk-enki42-dongle">Enki42 with dongle config</a>
<ul>
<li>This uses a nice!nano v2 as the dongle, but it did help with the setting up the Kconfig files.</li>
</ul>
</li>
<li><a href="https://github.com/jibingeo/zmk-config-onekey">Onekey</a>
<ul>
<li>This uses only an nRF52840 dongle as its board. I needed this as a reference since it appears ZMK does not have a board config for this.</li>
<li>It turns out that ZMK allows for use of boards supported by Zephyr, not just the ones in ZMK. The PCA100059 board is marked as <code>nrf52840dongle_nrf52840</code> in Zephyr.</li>
<li>This also showed me the directory configuration for a custom board configuration, which seems to be missing from the ZMK docs.</li>
</ul>
</li>
</ul>
<p>At this point, I had successfully gotten the ZMK GitHub Action to export the firmware for the halves and the dongle. This took about 5 hours and&hellip; well&hellip;</p>
<p><img loading="lazy" src="/projects/swan40/3/1.webp" type="" alt="failures"  /></p>
<p>Fun.</p>
<h3 id="risky-stuff">Risky Stuff</h3>
<p>Unfortunately, I don&rsquo;t have any debuggers or extra equipment I can use to flash my dongle with a UF2 bootloader, so I was forced to use the nRF Connect software to flash stuff onto it with the DFU bootloader. However, this software only allows me to flash .hex files onto the board, while the ZMK GitHub Action exported a .bin file (even though I set the config to export a .hex file :/).</p>
<p>I&rsquo;d like to note that I have basically no idea what .bin or .hex files are besides the fact that they contain software, which when flashed to some board makes cool stuff happen.</p>
<p>Here&rsquo;s where things got a little risky. I decided to blindly search up how to convert .bin to .hex, and ChatGPT told me that <code>srec_cat</code> was something I could look into. <a href="https://carta.tech/man-pages/man1/srec_examples.1.html">This article (?)</a> helped me figure out that the command I was looking for was:</p>
<pre tabindex="0"><code>srec_cat swan40_dongle-nrf52840dongle_nrf52840-zmk.bin -binary -o dongle.hex -intel 
</code></pre><p>(By the way, I used srec_cat on Windows as nRF Connect didn&rsquo;t seem to want to play well on Linux.)</p>
<p>From my attempts at trying to load the Adafruit UF2 bootloader onto my dongle, I found out that I cannot overwrite the MBR section of the dongle, which goes from address 0x00000000 to 0x00000FFF, meaning that whatever I wanted to write had to start at 0x00001000. The <code>srec_cat</code> command I stated above would make ZMK start at 0x00000000, overlapping with the MBR section. So, I figured out that I needed to apply an offset, which I did by modifying the <code>srec_cat</code> command as follows:</p>
<pre tabindex="0"><code>srec_cat swan40_dongle-nrf52840dongle_nrf52840-zmk.bin -binary -offset 0x00001000 -o dongle.hex -intel 
</code></pre><p>Somehow, that actually worked, and by some miracle, i didn&rsquo;t have to brick anything in the process of figuring that out.</p>
<h3 id="troubleshooting-1">Troubleshooting</h3>
<p>Right off the bat, the keyboard just refused to connect to the dongle. I later discovered that I need to have an <code>#include &quot;Swan40.dtsi&quot;</code> even for the dongle overlay, otherwise things just did not want to pair.</p>
<p>After getting the dongle to actually attempt to pair with the keyboard halves, it turns out the keyboard only works if I flash the settings_reset UF2 firmware onto the halves before loading the actual firmware, but the halves immediately failed to connect the moment the dongle was unplugged and replugged into the computer.</p>
<p>With some help from @bravekarma and @petejohanson on the ZMK Discord server, it turns out that (supposedly) the keymap was only being stored in the dongle&rsquo;s memory, causing it to be erased when unpowered. After taking some of the settings from the <a href="https://github.com/zmkfirmware/zmk/blob/main/app/boards/nrf52840dk_nrf52840.conf">nRF52840-DK ZMK board configuration</a>, the dongle now works as a plug-and-play device.</p>
<h1 id="the-end">The End?</h1>
<p>This marks the end of the Swan40 v1. Oh, but what&rsquo;s that? I smell a v1.1&hellip;</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Module 2] Optimizations</title>
      <link>https://cornerboxes.com/projects/3dp/2/</link>
      <pubDate>Fri, 18 Aug 2023 18:40:58 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/3dp/2/</guid>
      <description>In this module, we will be taking our first steps towards optimizing the 3D printing process.
Why Optimize? Yes, the default settings in the slicers mentioned in the last module should work for most cases, but the issue is that they are designed to be a catch-all solution. In simpler terms, they are designed to be able to avoid</description>
      <content:encoded><![CDATA[<p>In this module, we will be taking our first steps towards optimizing the 3D printing process.</p>
<h1 id="why-optimize">Why Optimize?</h1>
<p>Yes, the default settings in the slicers mentioned in the last module should work for most cases, but the issue is that they are designed to be a catch-all solution. In simpler terms, they are designed to be able to avoid</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 1] Establishing Goals</title>
      <link>https://cornerboxes.com/thoughtbooks/3dp/1/</link>
      <pubDate>Thu, 17 Aug 2023 17:04:41 +0300</pubDate>
      
      <guid>https://cornerboxes.com/thoughtbooks/3dp/1/</guid>
      <description>Introduction For the &amp;ldquo;A Guide to 3D Printing&amp;rdquo; bundle, the idea is to create a practical guide for people who currently view 3D printing as a black box that creates their desired 3D models in real life.
You may check out the current posts here.
Initial Difficulties For basically all my life, I&amp;rsquo;ve always been the learner, never the teacher.
While trying to compile my knowledge into articles, the biggest difficulty I had was with structuring.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>For the &ldquo;A Guide to 3D Printing&rdquo; bundle, the idea is to create a practical guide for people who currently view 3D printing as a black box that creates their desired 3D models in real life.</p>
<p>You may check out the current posts <a href="/projects/3dp">here</a>.</p>
<h2 id="initial-difficulties">Initial Difficulties</h2>
<p>For basically all my life, I&rsquo;ve always been the learner, never the teacher.</p>
<p>While trying to compile my knowledge into articles, the biggest difficulty I had was with structuring. Since pieces of knowledge tend to be connected with other pieces of knowledge in a web-like way, it is very tricky to structure everything such that the knowledge can be understood linearly.</p>
<p>Additionally, another issue I kept running into is using jargon that I hadn&rsquo;t yet introduced to the reader.</p>
<h3 id="takeaway-1">Takeaway 1</h3>
<p>In the beginning, I tried to assume that the user already knows how to design a 3D model, how to slice a file, and how to print their desired model. However, when I considered who might read my article, I realized that assuming everyone&rsquo;s baseline knowledge might lead to complications further down the line, so I decided to rewrite the first couple modules such that they require no prerequisite knowledge.</p>
<h3 id="takeaway-2">Takeaway 2</h3>
<p>While writing the first module, I realized that I also need to take into account how I retrieve my knowledge. Structuring everything mentally with the learner in mind is slowing things down a lot since I have a spend more time thinking than writing.</p>
<p>I&rsquo;ve come up with a compromise, which is a two-pass method. In the first pass, I would &ldquo;blurt&rdquo; everything I know into the modules in the order they come to mind in, then the second pass would be for structuring the information once I&rsquo;ve already extracted it out of me.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Module 1] The Basics</title>
      <link>https://cornerboxes.com/projects/3dp/1/</link>
      <pubDate>Thu, 17 Aug 2023 15:04:41 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/3dp/1/</guid>
      <description>NOTE: This bundle will be focusing on FDM/FFF (Fused Deposition Modelling/Fused Filament Fabrication) 3D printing. In layman terms, the type of 3D printing where plastic filament is involved.
Prerequisites To follow this section, I suggest having the following:
A functional 3D printer PLA filament A computer Objective After reading this article, you should be able to:
Find 3D models from online sources Use a slicer to turn a 3D model into gcode Successfully print a model Understand the general 3D printing process TL;DR: You should have the bare minimum of understanding needed to print a 3D model.</description>
      <content:encoded><![CDATA[<p><strong>NOTE: This bundle will be focusing on FDM/FFF (Fused Deposition Modelling/Fused Filament Fabrication) 3D printing. In layman terms, the type of 3D printing where plastic filament is involved.</strong></p>
<h1 id="prerequisites">Prerequisites</h1>
<p>To follow this section, I suggest having the following:</p>
<ul>
<li>A functional 3D printer</li>
<li>PLA filament</li>
<li>A computer</li>
</ul>
<h1 id="objective">Objective</h1>
<p>After reading this article, you should be able to:</p>
<ul>
<li>Find 3D models from online sources</li>
<li>Use a slicer to turn a 3D model into gcode</li>
<li>Successfully print a model</li>
<li>Understand the general 3D printing process</li>
</ul>
<p>TL;DR: You should have the bare minimum of understanding needed to print a 3D model.</p>
<h1 id="the-process">The Process</h1>
<p>The 3D printing process roughly has the following steps:</p>
<pre class="mermaid">flowchart TD
	subgraph A["Computer"]
		1("1. Obtaining the part design")
		2("2. Slicing the 3D model of the part")
		1 -- ".stl/.3mf file" --> 2
	end
	subgraph B["Printer"]
		3("3. Printing the part")
	end
	2 -- ".gcode file" --> 3
	4("4. (Optional) Postprocessing")
	3 -- "Printed part" --> 4
</pre>
<h2 id="1---obtaining-the-part-design">1 - Obtaining the part design</h2>
<p>There are two options when it comes to this:</p>
<ul>
<li>Download a design from an online 3D model sharing site such as <a href="https://www.printables.com/">Printables</a> or <a href="https://www.thingiverse.com/">Thingiverse</a>. Printables is the newer site, but Thingiverse has a larger collection. When using such sites to get a model, <strong>please comply with the design license restrictions.</strong></li>
<li>Design the part yourself. For 3D printing, parametric CAD software such as <a href="https://www.autodesk.com/products/fusion-360/overview?term=1-YEAR&amp;tab=subscription">Fusion360</a> and <a href="https://www.onshape.com/en/">Onshape</a> are often used. However, 3D mesh modelling software such as <a href="https://www.blender.org/">Blender</a> may be used as well.</li>
</ul>
<h3 id="optional-parametric-cad-vs-mesh-modelling">(Optional) Parametric CAD vs Mesh Modelling</h3>
<p>Parametric CAD programs use sketches, dimensions, and constraints to represent a 3D model, while mesh modelling software use vertices and faces to represent a 3D model. In practice, this means that designs done in parametric CAD tend to me more dimensionally accurate, while mesh modelling allows for more artistic freedom.</p>
<p>That said, parametric CAD software tend to require paid or educational licenses and are closed-source, while Blender is professional-grade, free, and open-source. There <em>are</em> open-source parametric CAD software out there, but they are far behind the paid options (in my opinion).</p>
<p>If you aren&rsquo;t part of an educational institution or have no means to get a professional license for parametric CAD software such as Fusion360, I would recommend Onshape as they intend to keep a free tier forever. Note that anything you design on the free tier of Onshape are publicly accessible by anyone.</p>
<h3 id="file-formats">File Formats</h3>
<p>In the past, the standard for 3D design files for 3D printing was the .stl file format, but in recent years, better formats such as .3mf have gained popularity. If you are to design your own parts, I would recommend exporting in the .3mf file format.</p>
<p>If you want to investigate the differences between .stl and .3mf files in more detail, check out <a href="https://www.3dnatives.com/en/stl-vs-3mf-280620224/">this article</a>.</p>
<p>In a nutshell, compared to .stl files, .3mf files are:</p>
<ul>
<li>more compressed (smaller file sizes)</li>
<li>may contain material or color information</li>
<li>may contain printing options</li>
<li>specifically designed for use in 3D printing.</li>
</ul>
<h2 id="2---slicing">2 - Slicing</h2>
<p>Our 3D design files contain information about the form of the 3D part we want to print, but unfortunately, 3D printers are dumb. 3D printers only understand machine instructions, which are more or less:</p>
<blockquote>
<p>&ldquo;Move the X motor by 30 steps&rdquo;
&ldquo;Move the Z motor by 2 steps&rdquo;
&ldquo;Move the E motor by 7 steps while moving the Y motor by -31 steps&rdquo;</p>
</blockquote>
<p>But how do we go from the dimensions of the part to instructions for the machine to print our part? This is where the <strong>slicer</strong> comes in.</p>
<p>A slicer is essentially a piece of software that takes in parameters about how you want a part printed (how fast the machine should move, what material is being used), and turns it into machine instructions (.gcode files). It&rsquo;s called a &ldquo;slicer&rdquo; because it turns solid model objects into instructions for the printer to create the model out of 2D &ldquo;slices&rdquo; (layers) of material.</p>
<p>The most common slicers used these days are <a href="https://ultimaker.com/software/ultimaker-cura/">Cura</a> and <a href="https://www.prusa3d.com/page/prusaslicer_424/">PrusaSlicer</a>, both of which are completely free and open-source. For beginners, I recommend Cura a little more, but if you want full control over the slicing process, I prefer PrusaSlicer. Both are fairly beginner-friendly if you ignore all the additional/expert parameters.</p>
<h3 id="a-little-note-about-all-the-parameters">A little note about all the parameters</h3>
<p>As long as your printer isn&rsquo;t super obscure and has a decent userbase, chances are that these two slicer software already have default settings made for your printer, which you can select in the setup process. For some models, these default settings should work, but due to the limitations of 3D printing, many models will fail to print. We&rsquo;ll cover the limitations of 3D printing in more detail later.</p>
<h3 id="note-about-ultimaker-printers">Note about Ultimaker printers</h3>
<p>If you are using an Ultimaker printer, I <strong>highly</strong> suggest you use Cura, as it was designed by Ultimaker to be used with their printers, and other slicers may not work seamlessly with the printer (some machines don&rsquo;t seem to use .gcode files).</p>
<h2 id="3---printing-the-part">3 - Printing the part</h2>
<p>Well, this stage is pretty self-explanatory. Most printers have a slot for an SD-card, microSD-card, or USB stick. After slicing, you should transfer the .gcode file to your SD-card/USB stick and put it back into the printer. You should then be able to select your file for printing through the printer&rsquo;s menu.</p>
<p>Some newer printers support file transfer over WiFi, thus making the process completely wireless. I would like to note that this might not be a great option if your printer is located to a large network, as it might be hard to locate your printer in the network.</p>
<h2 id="4---optional-postprocessing">4 - (Optional) Postprocessing</h2>
<h3 id="removing-extra-structures">Removing extra structures</h3>
<p>When you were slicing your 3D model, you may have gone to the preview tab and discovered that the slicer added some additional structures in addition to the model you want to print (We&rsquo;ll discuss why they exist later). After printing the model, you might have to remove these additional structures to obtain the part you&rsquo;re looking for.</p>
<p>Common tools for the job are:</p>
<ul>
<li>Cutters</li>
<li>Pliers</li>
<li>Precision knife or box knife</li>
</ul>
<p>With a little brute force, you might be able to pry these unwanted structures away from your model.</p>
<h3 id="removing-layer-lines">Removing layer lines</h3>
<p><strong>Note that by doing postprocessing to remove the layer lines, you may change the dimensional accuracy or physical properties in the process. I would only recommend doing this if you care about the aesthetics of your part above all else.</strong></p>
<p>Layer lines are inevitably visible with FFF 3D printing. They are created because the process relies on stacking layers of material on top of one another, so it&rsquo;s inevitable that the layers are going to be visible from the side of the print.</p>
<p>If you find the layer lines on the part undesirable, there are several methods to remove them, but in this guide, we will focus on the sanding/wet-sanding + filler primer method as it doesn&rsquo;t require a lot of extra equipment and is fairly low-cost.</p>
<p>The advantage of using wet-sanding over normal sanding is that the part will not heat up so much due to the presence of water, therefore your part is unlikely to deform due to heat from friction. However, it does also cause the process to be a little more messy.</p>
<p>The method is as follows:</p>
<ol>
<li>Start with a low grit of sandpaper, somewhere around 200 grit.</li>
<li>Sand the part</li>
<li>Apply a coat of primer on the part (optional)</li>
<li>Increase the grit of the sandpaper by 50-200 grit</li>
<li>Repeat steps 2-4 until satisfied.</li>
</ol>
<p>Stopping at around 1000 grit will leave a rather matte finish, while going up to 4000 grit will start to make the part glossy purely from sanding. However, going to higher grits will take a considerable amount of time and effort.</p>
<p>To finish the part off, using a final coat of spray paint should hide any remaining imperfections.</p>
<h1 id="limitations">Limitations</h1>
<p>Unfortunately, 3D printing isn&rsquo;t a silver bullet for manufacturing. There are two main limitations:</p>
<ul>
<li>3D printers are not able to print suspended pieces of plastic in midair because gravity exists.</li>
<li>Because of thermal expansion and contraction, the layers of plastic actually contract slightly as they are printed on top of one another. This has several consequences, with the worst one being that the print fully detaching from the print bed, leading to a mess of a failed print (this is also known as &ldquo;printing spaghetti&rdquo;).</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 2] Designing the Keyboard</title>
      <link>https://cornerboxes.com/projects/swan40/2/</link>
      <pubDate>Mon, 07 Aug 2023 21:58:25 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/swan40/2/</guid>
      <description>Tricks In my goals for this project, my number one goal was really the battery life. However, on a tiny split keyboard, I have not seen any good battery mounting methods that do not involve tenting the keyboard to make space below it or having it on the side. I want the battery to be part of the keyboard such that the keyboard&amp;rsquo;s physical footprint doesn&amp;rsquo;t have to extend too much to accommodate for it.</description>
      <content:encoded><![CDATA[<h2 id="tricks">Tricks</h2>
<p>In my goals for this project, my number one goal was really the battery life. However, on a tiny split keyboard, I have not seen any good battery mounting methods that do not involve tenting the keyboard to make space below it or having it on the side. I want the battery to be part of the keyboard such that the keyboard&rsquo;s physical footprint doesn&rsquo;t have to extend too much to accommodate for it.</p>
<p>In conventional wireless split keyboards, the battery is placed under the microcontroller, which is usually above the thumb keys. This approach means that the battery is basically completely hidden, which is aesthetically pleasing, but the problem is that the biggest battery that can really fit under the microcontroller only has a capacity of 150mAh. Using the <a href="https://zmk.dev/power-profiler">ZMK Power Profiler</a>, we can estimate that the battery life of the central half will only be around 2 weeks (given a nice!nano v2 and the default parameters for everything else), which is far too short in my opinion.</p>
<p>Putting the battery under the keyboard is out of the question, since:</p>
<ol>
<li>There are many sharp points under the PCB, risking battery damage.</li>
<li>I will have to tent the keyboard, which I don&rsquo;t want to do.</li>
</ol>
<p>So, my solution was to scrap using conventional pro-micro-sized boards and use the XIAO nRF52840. This allows me to do several things:</p>
<ul>
<li>The board features holes which also have castellated holes on the side, meaning that I am able to mount this to a PCB like an SMD component rather than having to use pins.</li>
<li>Saves money (compared to the nice!nano v2).</li>
</ul>
<p>However, mounting it like an SMD component comes with more challenges. The main one being that the XIAO microcontroller has SMD pads on the back for, among other things, the battery inputs. This makes things difficult since I can&rsquo;t simply solder the microcontroller to the PCB like a normal SMD component unless I want to cut off my access to the battery pads. My solution? Mount the microcontroller right-side-up, but UNDER the keyboard PCB, then cut away the part of the PCB between the pads. This is possible since the pads/holes on the microcontroller are on both sides of the microcontroller.</p>
<p>Top view:
<img loading="lazy" src="/projects/swan40/2/1.webp" type="" alt="Top view"  /></p>
<p>Bottom view:
<img loading="lazy" src="/projects/swan40/2/2.webp" type="" alt="Bottom view"  /></p>
<h2 id="kicad">KiCAD</h2>
<p>KiCAD was my software of choice for designing the keyboard. After using it for a while, I feel like it is a rather robust PCB design software, and I had little to no difficulty getting a feel for it.</p>
<p>Due to my trick that I mentioned above, I have to also customize the XIAO footprint in the software such that the pads are designed to be used with an upside-down microcontroller.</p>
<p>It also turns out that I knew basically nothing about PCBs, and it took a long time for me to come across the term &ldquo;via&rdquo;. In case you don&rsquo;t know, a via is essentially a plated hole which allows traces from one side of the board to connect to traces on the other side of the board. This is super useful for wiring, since I can essentially weave my way around traces without having to worry about leaving space for other traces.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 1] Goals</title>
      <link>https://cornerboxes.com/projects/swan40/1/</link>
      <pubDate>Mon, 07 Aug 2023 17:07:23 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/swan40/1/</guid>
      <description>Note: You can find the relevant files of this project in the Swan40 GitHub repository.
Goals Hardware On-off switch (Like the Corne) There should be a switch to disconnect the battery on the hardware level. Usage of a XIAO nRF52840 It should utilize Seeed Studio&amp;rsquo;s XIAO nRF52840 as the controller. (This was a cost-cutting measure; the nice!nano, a commonly used bluetooth microcontroller, costs about 26€ a piece excl. shipping, while this board costs only $10.</description>
      <content:encoded><![CDATA[<p>Note: You can find the relevant files of this project in the <a href="https://github.com/shzhe02/Swan40">Swan40 GitHub repository</a>.</p>
<h2 id="goals">Goals</h2>
<h3 id="hardware">Hardware</h3>
<ul>
<li>On-off switch (Like the Corne)
<ul>
<li>There should be a switch to disconnect the battery on the hardware level.</li>
</ul>
</li>
<li>Usage of a XIAO nRF52840
<ul>
<li>It should utilize Seeed Studio&rsquo;s XIAO nRF52840 as the controller.</li>
<li>(This was a cost-cutting measure; the nice!nano, a commonly used bluetooth microcontroller, costs about 26€ a piece excl. shipping, while this board costs only $10.)</li>
</ul>
</li>
</ul>
<h3 id="software">Software</h3>
<ul>
<li>ZMK
<ul>
<li>It should use ZMK as its firmware.</li>
</ul>
</li>
</ul>
<h3 id="design">Design</h3>
<ul>
<li>Large and flexible battery capacity
<ul>
<li>The PCB should allow for mounting of large and small batteries.</li>
<li>There should be at least two battery mounting options.</li>
<li>The battery mounting spots should be able to accommodate up to 1000mAh LiPo batteries.</li>
</ul>
</li>
<li>3D-printed case
<ul>
<li>It should be possible to mount the board in a 3D-printed case which does not tilt or raise the PCB significantly.</li>
</ul>
</li>
<li>Melted PCB traces
<ul>
<li>The traces should be melted using the <a href="https://github.com/mitxela/kicad-round-tracks">Round Tracks</a> plugin. (Because it&rsquo;s cool!)</li>
</ul>
</li>
<li>Aggressive column stagger (Like the Ferris Sweep)
<ul>
<li>The column for the pinky finger should be aggressively staggered.</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 0] Me and Keyboards</title>
      <link>https://cornerboxes.com/projects/swan40/0/</link>
      <pubDate>Tue, 01 Aug 2023 02:20:12 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/swan40/0/</guid>
      <description>Disclaimer This is not intended for the average reader. Lots of keyboard jargon is used for the sake of convenience.
A Little Background Just skip to the next post if you don&amp;rsquo;t want to hear my life&amp;rsquo;s story :D
I&amp;rsquo;m really into keyboards. In particular, mechanical keyboards.
I started just about how most people enter this space: &amp;ldquo;Clicky keyboards are cool&amp;rdquo;. Well, that is, until they were annoying. Since then, I&amp;rsquo;ve been on and endless pursuit of the &amp;ldquo;perfect&amp;rdquo; keyboard.</description>
      <content:encoded><![CDATA[<h2 id="disclaimer">Disclaimer</h2>
<p>This is not intended for the average reader. Lots of keyboard jargon is used for the sake of convenience.</p>
<h2 id="a-little-background">A Little Background</h2>
<p>Just skip to the next post if you don&rsquo;t want to hear my life&rsquo;s story :D</p>
<p>I&rsquo;m really into keyboards. In particular, mechanical keyboards.</p>
<p>I started just about how most people enter this space: &ldquo;Clicky keyboards are cool&rdquo;. Well, that is, until they were annoying. Since then, I&rsquo;ve been on and endless pursuit of the &ldquo;perfect&rdquo; keyboard. Here&rsquo;s a brief timeline, with my Typeracer speeds attached:</p>
<ul>
<li>2018 - 50 WPM
<ul>
<li>First keyboard obtained, generic 105-key mechanical keyboard with Outemu Blue switches.</li>
</ul>
</li>
<li>2019 - 70 WPM
<ul>
<li>The blue switches really got on my nerves, but I didn&rsquo;t want to purchase a whole other keyboard, so I ended up getting some Gateron Brown switches, desoldered all my blue switches and replaced them.</li>
</ul>
</li>
<li>2020 - 80 WPM
<ul>
<li>While trying to play games, I noticed that my keyboard took too much space, causing me to ram my mouse into it unintentionally fairly often. I decided to finally switch to an Anne Pro 2 (a 60% keyboard) with Kailh Box Red switches. Definitely a great upgrade, and it was my introduction to the world of keyboard form factors.</li>
</ul>
</li>
<li>2022 - 95 WPM
<ul>
<li>June: I decided to get an &ldquo;endgame&rdquo; keyboard, the Akko MOD008. Unfortunately, this turned out to be a rather costly mistake, since it turned out that all the effort I went through to modify the keyboard to make it sound fantastic was voided the moment I wore my headphones while using my computer. However, I did learn quite a bit about material choices and acoustics, which meant this endeavor wasn&rsquo;t completely in vain.</li>
</ul>
</li>
</ul>
<p>Now, this is where things get a little interesting.</p>
<p>In October 2022, I started to notice that my typing style became a limiting factor in my typing. For some context, I learnt typing in a rather weird way: chatting in a Minecraft server about Redstone engineering (That&rsquo;s a story for another time). This meant that I learned to type with my left hand starting from the WASD-SHIFT-SPACEBAR hand position, which meant that my left hand had to leap all over the place. This caused an awful lot of errors while typing, but muscle memory built up over time and I got pretty fast at it.</p>
<p>However, I really wanted to crack that 100 WPM barrier consistently, and I felt that I could not continue that much further with my current typing style. For a short period of time, I tried out the conventional way of typing, using the home row. It felt extremely foreign to me, and due to the row stagger of conventional keyboards, I had to tilt my left hand unnaturally far inward, which felt extremely uncomfortable. I eventually gave up not just because of the awkward hand posture, but also because it was extremely difficult to undo my last decade&rsquo;s worth of muscle memory.</p>
<p>At this point, I started to prioritize typing comfort over typing speed. In pursuit of this, I was introduced to the world of fully-custom split keyboards. With the sheer number of options available, I was ready to tackle a challenge in my typing.</p>
<p>So, in my previous attempt at improving comfort, muscle memory got in the way. To avoid that happening this time, I wanted to switch as many things as I could up. Here were the features I looked for:</p>
<ul>
<li>Split keyboard
<ul>
<li>No more bending wrists inward when I can now have my hands at arbitrary angles.</li>
</ul>
</li>
<li>Friendship ended with row stagger, now column stagger is my best friend
<ul>
<li>No need to have my fingers extend diagonally anymore.</li>
</ul>
</li>
<li>Entering the 40-50% space
<ul>
<li>Less keys = less movement to reach any given key</li>
</ul>
</li>
<li>Colemak-DHm as the new keyboard layout
<ul>
<li>Qwerty tends to use the row above the home row quite a bit. <a href="https://www.slant.co/versus/1595/21371/~qwerty_vs_colemak-mod-dh">Here&rsquo;s a pretty nice comparison.</a> There&rsquo;s also lots more that&rsquo;s fantastic about the DHm variant, which you can read about in more detail <a href="https://colemakmods.github.io/mod-dh/">here</a> if you are interested.</li>
</ul>
</li>
</ul>
<p>That led me to the <a href="https://github.com/foostan/crkbd">Corne</a>, which I&rsquo;ve found to work fantastic for my use case. I was using it on and off starting in October, but I decided to fully commit to it in December. It&rsquo;s now July 2023, which means I&rsquo;ve been using this as my main keyboard for about 8 months. I&rsquo;ve recovered my typing speed to around 80-90 WPM, which is plenty in daily use cases, since I can&rsquo;t even thing about things to type that quickly. And the icing on the cake is: I can seamlessly switch between Qwerty and Colemak-DHm! In fact, my Qwerty speed has somehow increased to about 110 WPM.</p>
<h2 id="next-steps">Next steps</h2>
<p>Well, with that happy ending, why does this project exist? Haven&rsquo;t I found the perfect keyboard? Well, around May 2023, I also built a similar split keyboard called the <a href="https://github.com/davidphilipbarr/Sweep">Ferris Sweep</a>. It has only 34 keys, which is even fewer than my Corne&rsquo;s 42! In addition, there are a few more features that were present in that board that I really wanted:</p>
<ul>
<li>Much tighter spacing between the keys</li>
<li>Fully wireless via Bluetooth</li>
<li>More aggressive column stagger</li>
</ul>
<p>That said, I still do like certain things about my Corne more:</p>
<ul>
<li>More keys! (34 is just way too few that I have to use fancy features to use the keyboard to fulfill my daily needs)</li>
<li>It has a plate (It makes the switches, and therefore the keys, much more stable.)</li>
</ul>
<p>And thus, I decided to create a compromise between the two, with additional added features to customize it to my liking!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 3] Task Control</title>
      <link>https://cornerboxes.com/thoughtbooks/self-benchmarking/3/</link>
      <pubDate>Mon, 24 Jul 2023 14:24:56 +0300</pubDate>
      
      <guid>https://cornerboxes.com/thoughtbooks/self-benchmarking/3/</guid>
      <description>The Three Types of Task Control After pondering about the topic for a long time, I took some inspiration from a business-related course I previously attended. Push and pull systems in particular stood out to me because I felt like push and pull systems could be abstraction terms used to describe certain task management systems.
(REWRITE IN PROGRESS)
In modern society, we&amp;rsquo;re largely deadline-driven, as it is the easiest method for something to get done.</description>
      <content:encoded><![CDATA[<h2 id="the-three-types-of-task-control">The Three Types of Task Control</h2>
<p>After pondering about the topic for a long time, I took some inspiration from a business-related course I previously attended. <strong>Push and pull systems</strong> in particular stood out to me because I felt like push and pull systems could be abstraction terms used to describe certain task management systems.</p>
<hr>
<p>(REWRITE IN PROGRESS)</p>
<p>In modern society, we&rsquo;re largely deadline-driven, as it is the easiest method for something to get done. If the consequences of not meeting the deadline are severe enough, there is a much lesser need for self-discipline or motivation.</p>
<p>One thing I find really relevant to the effectiveness of deadlines is Parkinson&rsquo;s Law:</p>
<blockquote>
<p>Work expands to fill the time allocated to it.</p>
</blockquote>
<p>This rings true for basically all my deadline-based tasks I need to complete, as I have a horrible tendency to only get started only hours or days before a deadline.</p>
<p>But what about tasks that don&rsquo;t have deadlines? Do I simply set deadlines for myself?</p>
<h2 id="deadlines">Deadlines</h2>
<p>Before I venture further, I want to explain how deadlines work for me. I&rsquo;m very honest towards myself, which means that self-rewarding or self-punishing rarely works. Rewarding/punishing only works for me if the following conditions are met:</p>
<ul>
<li>It is external (e.g. the reward itself is out of my control).</li>
<li>I deem that the consequence/reward is worth the difficulty of the task.</li>
</ul>
<p>For some concrete examples, the following works:</p>
<ul>
<li>Getting enough points in an assignment such as to not fail a course.
<ul>
<li>The punishment here is having to study things again to prepare for a retake, or having to do the course all over again. (Consequence is worth the task difficulty: it&rsquo;s easier to complete the course properly than study everything again for the retake.)</li>
</ul>
</li>
</ul>
<p>while the following does not work:</p>
<ul>
<li>Put in the extra work to complete a course with 100% of the points to get a free rubber ducky.
<ul>
<li>Is the rubber ducky worth all the extra time? If I really wanted one, I would simply pay for one.</li>
</ul>
</li>
</ul>
<p>From the examples above, I hope you can tell why the second condition exists. However, that leaves the first condition. I hinted at its reason in the second example above, which is that <strong>if there is an alternate easier path to the reward, I would take that instead.</strong> For example, if my goal is to have an ice cream, why would I do this:</p>
<pre class="mermaid">flowchart LR
	1("Do 30 jumping jacks")
	2("Go to the grocery store")
	3("Get an ice cream")
	1 --> 2
	2 --> 3
</pre>
<p>when I can do this?</p>
<pre class="mermaid">flowchart LR
	1("Go to the grocery store")
	2("Get an ice cream")
	1 --> 2
</pre>
<p>The path to the reward or away from the consequence must be a reasonably efficient route.</p>
<p>In summary, to me, a deadline is:</p>
<ul>
<li>A point in time when a particular task is due.</li>
<li>If not completed within the allocated time span, consequences <strong>will</strong> follow.</li>
<li>The consequences must matter to me, and they must be real and external.</li>
</ul>
<p>Why wasn&rsquo;t rewarding in that summary? It&rsquo;s because deadlines are fundamentally consequence-based, as having a reward at the end would simply mean that the consequence is being deprived of the reward.</p>
<h3 id="self-set-deadlines">Self-set deadlines</h3>
<p>From the previous section, you can probably already tell why self-set deadlines are very difficult for me. If I want to set an artificial consequence or reward for the completion of a task, the consequence/reward would already be in my control, and adding a task to the process only makes the route to the reward less efficient.</p>
<h2 id="no-deadlines">No deadlines?</h2>
<p>At first glance, this approach might seem super stupid. If I don&rsquo;t set a deadline, wouldn&rsquo;t Parkinson&rsquo;s Law effectively cause me to abandon my tasks indefinitely? The answer is yes and no. Yes, in the sense that I have abandoned projects before due to having no deadlines, but also no in the sense that some projects I have executed in the past have been completed at full speed.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 2] Meeting Prerequisites</title>
      <link>https://cornerboxes.com/thoughtbooks/self-benchmarking/2/</link>
      <pubDate>Mon, 24 Jul 2023 13:26:43 +0300</pubDate>
      
      <guid>https://cornerboxes.com/thoughtbooks/self-benchmarking/2/</guid>
      <description>Finding Suitable Metrics To reiterate, the goal of this benchmarking is to maximize the amount of things done.
I think there are two main factors that affect this metric:
How much time is actually spent doing tasks How effectively time is spent doing tasks Both factors are not very straightforward to improve, as they tend to get better with practice. However, some measures for anti-procrastination and anti-distraction may help to speed up the progress for the first factor.</description>
      <content:encoded><![CDATA[<h2 id="finding-suitable-metrics">Finding Suitable Metrics</h2>
<p>To reiterate, the goal of this benchmarking is to <strong>maximize the amount of things done</strong>.</p>
<p>I think there are two main factors that affect this metric:</p>
<ol>
<li>How much time is actually spent doing tasks</li>
<li>How effectively time is spent doing tasks</li>
</ol>
<p>Both factors are not very straightforward to improve, as they tend to get better with practice. However, some measures for anti-procrastination and anti-distraction may help to speed up the progress for the first factor.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 1] Introduction</title>
      <link>https://cornerboxes.com/thoughtbooks/self-benchmarking/1/</link>
      <pubDate>Mon, 24 Jul 2023 12:59:53 +0300</pubDate>
      
      <guid>https://cornerboxes.com/thoughtbooks/self-benchmarking/1/</guid>
      <description>Origin TL;DR: Project TTMS is only part of the solution to self-organization.
While I was pondering about Project TTMS, I realized that the whole point of an organizational system is to make the process of planning and organizing tasks as seamless as possible, such that I can maximize the amount of effective time (time spent actually doing the tasks). No matter how seamless my self-organizational system is, it doesn&amp;rsquo;t matter if I cannot actually execute my tasks efficiently.</description>
      <content:encoded><![CDATA[<h2 id="origin">Origin</h2>
<p><strong>TL;DR: Project TTMS is only part of the solution to self-organization.</strong></p>
<p>While I was pondering about Project TTMS, I realized that the whole point of an organizational system is to make the process of planning and organizing tasks as seamless as possible, such that I can maximize the amount of effective time (time spent <strong>actually doing</strong> the tasks). No matter how seamless my self-organizational system is, it doesn&rsquo;t matter if I cannot actually execute my tasks efficiently.</p>
<p>In essence, the goal for both self-benchmarking and Project TTMS is to <strong>get as many things done as possible</strong>.</p>
<p>So, how do I get more things done?</p>
<h2 id="why-benchmark">Why Benchmark?</h2>
<p>My first thought was simply tackling this as if I were an algorithm (the software kind). To optimize an algorithm, one usually does the following steps:</p>
<ol>
<li>Design the algorithm</li>
<li>Test the algorithm</li>
<li>Benchmark the algorithm</li>
<li>Optimize the algorithm</li>
<li>Repeat steps 2-4 until the desired outcome is achieved</li>
</ol>
<p>Now, let&rsquo;s adapt the steps above if we think about the algorithm being me executing tasks.</p>
<ol>
<li>Make me exist (DONE, you&rsquo;re reading something I wrote, after all.)</li>
<li>Test myself (DONE, because I&rsquo;m capable of doing tasks.)</li>
<li>Benchmark myself</li>
<li>Optimize how I complete tasks</li>
<li>Repeat 3-4 until the desired outcome is achieved</li>
</ol>
<p>To summarize, the entire point of this thoughtbook is going to be about what I do to perform steps 3 and 4, but since benchmarking will take the bulk of the time, most of the posts will be focused on that.</p>
<h3 id="setting-limits">Setting Limits</h3>
<p>When it comes to benchmarking, I also need to set some ground rules/limits. I could hypothetically aim for the following:</p>
<pre class="mermaid">flowchart LR
	1("Wake up")
	2("Do tasks")
	3("Sleep")
	1 --> 2
	2 --> 3
	3 --> 1
</pre>
<p>but I can already tell that is neither realistic (I&rsquo;m not going to be benchmarking myself forever&hellip;) nor is it sustainable, as it leaves me super prone to burnout.</p>
<p>I eventually settled on the following:</p>
<ul>
<li>I can only start benchmarking after completing my morning routines.</li>
<li>I can benchmark myself for 10 hours a day at most.</li>
<li>The benchmark can be stopped as long as it has taken place for at least 5 continuous hours.</li>
<li>Only one benchmark session can take place per day.</li>
</ul>
<h2 id="the-prerequisites-of-benchmarking">The Prerequisites of Benchmarking</h2>
<p>In my opinion, any benchmark needs to have two prerequisites:</p>
<ul>
<li>It needs to involve a metric that&rsquo;s measurable.</li>
<li>It needs to be repeatable.</li>
</ul>
<h3 id="measurability">Measurability</h3>
<p>The reason why a benchmark is useful for optimization (in general) is because it lets us figure out if a change positively impacted whatever we are optimizing.</p>
<h3 id="repeatability">Repeatability</h3>
<p>Unfortunately (or fortunately, depending on how you think about it), humans aren&rsquo;t exactly computers. We are much more unpredictable than computers, and there&rsquo;s even a whole field called psychology for attempting to predict our unpredictable nature.</p>
<p>If we want to benchmark something, it&rsquo;s very important that the benchmark is <strong>repeatable</strong>. If the results are all over the place, their significance is essentially useless.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Preface</title>
      <link>https://cornerboxes.com/projects/3dp/0/</link>
      <pubDate>Wed, 19 Jul 2023 22:11:32 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/3dp/0/</guid>
      <description>Introduction For most people getting started with 3D printing, it usually seems like a black box; you give it a 3D model of something you want, and it spits out a real, tangible object. Don&amp;rsquo;t get me wrong, there&amp;rsquo;s nothing inherently wrong with viewing 3D printing this way. However, that&amp;rsquo;s like buying a racing bike just to use it in 1st gear all the time; gaining a little more understanding about how the machine (or bicycle, if we are to continue the analogy) works goes a long way for getting what you want done faster and better.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>For most people getting started with 3D printing, it usually seems like a black box; you give it a 3D model of something you want, and it spits out a real, tangible object. Don&rsquo;t get me wrong, there&rsquo;s nothing inherently wrong with viewing 3D printing this way. However, that&rsquo;s like buying a racing bike just to use it in 1st gear all the time; gaining a little more understanding about how the machine (or bicycle, if we are to continue the analogy) works goes a long way for getting what you want done faster and better.</p>
<p>This bundle is designed in modules: each module assumes the reader has read through and understood the previous bundle, and they explain different stages of the 3D printing process. They are ordered such that earlier modules contain fundamental knowledge about 3D printing, while later modules contain more obscure bits of information which you may be interested in if your goal is to get the absolute most out of your 3D printer.</p>
<p>This is not a course; you are free to stop at any module if you deem that any further information will only lead to diminishing returns.</p>
<p><strong>This bundle will be focusing on FDM/FFF (Fused Deposition Modelling/Fused Filament Fabrication) 3D printing. In layman terms, the type of 3D printing where plastic filament is involved.</strong></p>
<h2 id="what-is-the-3d-printing-process">What is the 3D printing process?</h2>
<p>It is the process to get from an idea of a component to a printed 3D model.</p>
<p>In this bundle, the 3D printing process I will be referring to is the following:</p>
<pre class="mermaid">flowchart LR
	subgraph A["Computer"]
		1("1. Designing the part")
		2("2. Slicing the 3D model of the part")
		1 -- ".stl/.3mf file" --> 2
	end
	subgraph B["Printer"]
		3("3. Printing the model")
	end
	2 -- ".gcode file" --> 3
</pre>
<h2 id="module-structure">Module Structure</h2>
<p>The modules will be arranged in the following topical order:</p>
<ul>
<li>Module 1 -</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Getting Nushell to run in an Alpine Linux container</title>
      <link>https://cornerboxes.com/misc/alpine-toolbx-nushell-starship/</link>
      <pubDate>Tue, 11 Jul 2023 13:11:22 +0300</pubDate>
      
      <guid>https://cornerboxes.com/misc/alpine-toolbx-nushell-starship/</guid>
      <description>From my post about my digital setup, I wanted to quickly write a small post about getting nushell and starship working in an Alpine Linux Toolbx container.
So, the problem is that Alpine Linux uses the musl C library instead of glibc. This causes a compatibility problem when running Rust programs that were compiled on the main system within the Alpine Linux container. In addition, the PATH environment variable is inherited from the host system due to how Toolbx works.</description>
      <content:encoded><![CDATA[<p>From my post about my digital setup, I wanted to quickly write a small post about getting nushell and starship working in an Alpine Linux <a href="https://containertoolbx.org/">Toolbx</a> container.</p>
<p>So, the problem is that Alpine Linux uses the musl C library instead of glibc. This causes a compatibility problem when running Rust programs that were compiled on the main system within the Alpine Linux container. In addition, the PATH environment variable is inherited from the host system due to how Toolbx works.</p>
<p>Here&rsquo;s the workaround I found that seems to work:</p>
<ul>
<li>Inside the Alpine Linux container:
<ul>
<li>Enable the <code>testing</code> repository</li>
<li>Install both starship and nushell using the apk package manager.</li>
<li>In the file <code>~/.cache/starship/init.nu</code>, replace all occurrences of <code>^/home/&lt;user&gt;/.cargo/bin/starship</code> to just <code>starship</code>, and make sure that the starship executable is in the system path.</li>
</ul>
</li>
<li>On the host system:
<ul>
<li>Find the cargo env file located at <code>~/.cargo/env</code></li>
<li>Edit the line with <code>export PATH</code> such that it appends the <code>~/.cargo/bin</code> directory to the path instead of prepending it.
<ul>
<li>As the container will inherit the PATH from the host system, the <code>nu</code> and <code>starship</code> executables within the <code>~/.cargo/bin</code> directory will be deprioritized, allowing the system packages to take priority.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>However, one problem with this workaround is that when using <code>toolbox enter &lt;alpine linux container name&gt;</code> from nushell on the host system, it will try continuing to use the same nushell executable that&rsquo;s currently being used by the host system within the container. To work around this, you should first create a bash session with <code>bash</code>, then entering your toolbx container, and then using <code>nu</code> to start up nushell.</p>
<p>P.S. Since this is me trying to backtrack what I did, I may have left out some things. If it doesn&rsquo;t work out for you, please make a comment.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>My Digital Setup</title>
      <link>https://cornerboxes.com/misc/setup/</link>
      <pubDate>Tue, 11 Jul 2023 12:27:05 +0300</pubDate>
      
      <guid>https://cornerboxes.com/misc/setup/</guid>
      <description>I really enjoy semi-obscure technologies, and I try implementing many of them into my own computer. So, I thought it would be a little fun to make a little write-up about what components my setup consists of and why they exist.
Setup v1 (as of 2023-07-11) (I&amp;rsquo;ll add a diagram here later, but for now, here&amp;rsquo;s a bullet-point representation)
Main desktop Running Fedora Kinoite 38 Runs 3 containers (via Toolbx) Dev container Running Fedora 38 (container version) Contains all the additional packages I need for software development Play container Running Fedora 38 (container version) Primarily for running games (on Steam) Utils container Running Alpine Linux Edge (container version) Home server (repurposed old laptop) Running Rocky Linux 9 Runs 3 containers (Podman + podman-compose) Nextcloud Penpot Forgejo All 3 containers are connected to a subdomain of mine via Cloudflare Tunnels As for some personal preferences:</description>
      <content:encoded><![CDATA[<p>I really enjoy semi-obscure technologies, and I try implementing many of them into my own computer. So, I thought it would be a little fun to make a little write-up about what components my setup consists of and why they exist.</p>
<h1 id="setup-v1-as-of-2023-07-11">Setup v1 (as of 2023-07-11)</h1>
<p>(I&rsquo;ll add a diagram here later, but for now, here&rsquo;s a bullet-point representation)</p>
<ul>
<li>Main desktop
<ul>
<li>Running Fedora Kinoite 38</li>
<li>Runs 3 containers (via Toolbx)
<ul>
<li>Dev container
<ul>
<li>Running Fedora 38 (container version)</li>
<li>Contains all the additional packages I need for software development</li>
</ul>
</li>
<li>Play container
<ul>
<li>Running Fedora 38 (container version)</li>
<li>Primarily for running games (on Steam)</li>
</ul>
</li>
<li>Utils container
<ul>
<li>Running Alpine Linux Edge (container version)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Home server (repurposed old laptop)
<ul>
<li>Running Rocky Linux 9</li>
<li>Runs 3 containers (Podman + podman-compose)
<ul>
<li>Nextcloud</li>
<li>Penpot</li>
<li>Forgejo</li>
</ul>
</li>
<li>All 3 containers are connected to a subdomain of mine via Cloudflare Tunnels</li>
</ul>
</li>
</ul>
<p>As for some personal preferences:</p>
<ul>
<li>Preferred shell: <a href="https://nushell.sh">nushell</a></li>
<li>Preferred terminal multiplexer: <a href="https://zellij.dev">zellij</a></li>
<li>Preferred terminal emulator: <a href="https://alacritty.org">alacritty</a></li>
</ul>
<hr>
<h1 id="some-explanation">Some explanation</h1>
<p>Now that you&rsquo;ve seen what the setup consist of, I&rsquo;ll try walking through some of my choices.</p>
<h2 id="distro-choices">Distro choices?</h2>
<h3 id="main-desktop">Main desktop</h3>
<p>I went with Kinoite due to the following reasons:</p>
<ul>
<li>KDE is just what I&rsquo;m used to.</li>
<li>Containerized workflow
<ul>
<li>If I mess up setting up a new environment for whatever purpose, I can just delete the whole container and start a new one up from my last custom image.</li>
</ul>
</li>
<li>Atomic
<ul>
<li>I find the rpm-ostree package manager (?) really cool! I like how I can just pin versions of my system and reboot to them in the future if needed. This also brings about better system stability.</li>
</ul>
</li>
<li>Fedora-ish
<ul>
<li>Since prior to this, I&rsquo;ve been using Fedora 36, 37 and 38, I wanted to still have something from the Fedora ecosystem. I also wanted to have the almost bleeding-edge package updates while maintaining pretty good stability (which is why I didn&rsquo;t go for RHEL or similar).</li>
</ul>
</li>
<li>Why not?
<ul>
<li>Heck, it&rsquo;s free! And if it&rsquo;s more complicated, that just means more things to learn :D</li>
</ul>
</li>
</ul>
<h3 id="home-server">Home server</h3>
<p>I just wanted something stable so I could just chuck my laptop on a shelf and have it run 24/7 with no issues. From some research, it seemed like RHEL was the gold standard for stability, but since I like open-source, I went with one of its derivatives, Rocky Linux 9.</p>
<h2 id="whats-with-my-preferences">What&rsquo;s with my preferences?</h2>
<p>&hellip;I&rsquo;m totally not biased towards applications built with Rust&hellip;</p>
<h3 id="nushell">Nushell</h3>
<p>Nushell may not be the most well-supported shell out there, but since I am more of a casual Linux user, I care more about my experience more over raw utility. The main reasons why I just went with nushell is because of the super pretty error messages and the structured responses for many commands.</p>
<p>Additionally, I can couple this with <a href="https://starship.rs">Starship</a> and have super pretty terminal prompts!</p>
<p>Extra: If I ever need to, I can always just type <code>bash</code> and do what I need to do.</p>
<h3 id="zellij">Zellij</h3>
<p>I previously tried tmux, but didn&rsquo;t really find it very easy to use. I ended up discovering Zellij from a recommendation, and it basically lets me do everything I need it to do. All the controls are on-screen, so I don&rsquo;t really have to memorize them.</p>
<p>I&rsquo;m also not really a multiplexer power user, so just the function of multiple panes is basically the only thing I need.</p>
<p>If I ever need better aesthetics, I also have the option to remove unnecessary portions of the interface to make it look super minimal like tmux.</p>
<h3 id="alacritty">Alacritty</h3>
<p>Although Konsole (the default emulator that comes with KDE Plasma) works, I wanted a little less clutter. Alacritty just works, feels very responsive, and only contains the terminal itself with no extra buttons.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Previous Site Attempts</title>
      <link>https://cornerboxes.com/thoughtbooks/site-history/</link>
      <pubDate>Thu, 22 Jun 2023 22:14:27 +0300</pubDate>
      
      <guid>https://cornerboxes.com/thoughtbooks/site-history/</guid>
      <description>If you haven&amp;rsquo;t already checked out the about site page, please read it first for some context.
Attempt 1: Wordpress Link to Wordpress.
When one usually looks to create a website as a complete newbie to the web development space, the first results usually tend to be either website services like Squarespace or Wix, or Wordpress (the open source web content management system, not the hosting service). Squarespace and Wix felt a little bit restrictive in terms of what type of content I could create with it, which made me attempt to work with Wordpress.</description>
      <content:encoded><![CDATA[<p>If you haven&rsquo;t already checked out the <a href="/about/about-site">about site page</a>, please read it first for some context.</p>
<h2 id="attempt-1-wordpress">Attempt 1: Wordpress</h2>
<p>Link to <a href="https://wordpress.org/">Wordpress</a>.</p>
<p>When one usually looks to create a website as a complete newbie to the web development space, the first results usually tend to be either website services like Squarespace or Wix, or Wordpress (the open source web content management system, not the hosting service). Squarespace and Wix felt a little bit restrictive in terms of what type of content I could create with it, which made me attempt to work with Wordpress.</p>
<p>I eventually gave up on Wordpress due to the following reasons:</p>
<ol>
<li>I spent way too much time configuring the site, since there are simply an overwhelming number of plugins and options.</li>
<li>Wordpress itself isn&rsquo;t very secure, and due to most websites being built on Wordpress, there are many malicious bots out there trying to crack the admin account to gain access to the site. I ended up spending days researching and implementing all sorts of security measures such as 2FA, relocating the admin login URL, lots of hardening plugins, and even setting up the Wordpress SMTP mailing service in order to get emails whenever suspicious activity was spotted. Suffice to say, I felt like I was living in fear of my site being breached, despite there not being any content on the site.</li>
<li>When I actually got around to building the website, I discovered the default page builder offered by Wordpress to be very restrictive, and when I went to look for alternative options, I found out that some types of content blocks were simply paywalled. It then became a game of &ldquo;finding the best page builder&rdquo;, which eventually led to some more analysis paralysis on my end.</li>
<li>I eventually realized that Wordpress is sorely overkill for the purpose I needed it to serve. I just wanted to create some content, yet this platform is geared up for creating e-commerce websites or other fancy applications.</li>
</ol>
<p>After going through the endless cases of analysis paralysis from all the options Wordpress had to offer, it was safe to say that my motivation was completely drained. Until&hellip;</p>
<h2 id="attempt-2-ghost">Attempt 2: Ghost</h2>
<p>Link to <a href="https://ghost.org/">Ghost</a>.</p>
<p>A couple months later, I watched a <a href="https://youtu.be/acBJsjCqgtM">video</a> from Ali Abdaal about how to build a website, where one of his recommendations was Ghost. At first glance, it appeared to be a more batteries-included version of Wordpress, which was great to hear as it removed all the hardships I had with Wordpress.</p>
<p>After setting up an instance of Ghost myself and starting to write content, I discovered a few things that really bugged me:</p>
<ol>
<li>There was no way to implement 2FA, and I really did not want my admin account to be secured solely by a password.</li>
<li>The page builder felt quite weird. it was not Markdown, but more like a locked-down version of Notion&rsquo;s editor. This annoyed me as it did not really offer the features I wanted for easily getting my ideas in text. There was a markdown block available, but writing in markdown in another editor just felt weird.</li>
</ol>
<p>It didn&rsquo;t help that back then, I also struggled really badly with getting my thoughts and ideas down in text, meaning that when it came to writing content, I always just blanked out.</p>
<h2 id="attempt-3-hugo">Attempt 3: Hugo</h2>
<p>Link to <a href="https://gohugo.io">Hugo</a>.</p>
<p>I caught wind of GitHub Pages from a classmate of mine, which prompted me to look into static site generators further. It is basically perfect security-wise, since static sites means that the entire site is just basic HTML with some very light JavaScript. In other words, there is no database behind the scenes that could be hacked.</p>
<p>Since all the content pages are written in Markdown, I found out that I could also use Obsidian to edit the files, making my writing experience significantly better.</p>
<p>On the hosting end, I decided to use Cloudflare Pages over GitHub Pages due to Cloudflare Pages&rsquo; more generous limits.</p>
<p>As for the theme, I initially tried to use the <a href="https://github.com/CaiJimmy/hugo-theme-stack">Stack theme</a>, but I found it quite difficult to configure and understand. Later, I tried the <a href="https://github.com/adityatelange/hugo-PaperMod">PaperMod theme</a>, but the complete lack of sidebars (table of contents could only be placed at the top of each page) made it feel too restrictive in my opinion. I eventually settled on a fork of the PaperMod theme, <a href="https://github.com/reorx/hugo-PaperModX">PaperModX</a>, which checked all my boxes. To add a little personal touch, I switched up the color scheme to the Nord theme, hence my personal fork, <a href="https://github.com/shzhe02/PaperModX-nordish">PaperModX-nordish</a>.</p>
<p>As for the comment system, I&rsquo;m using <a href="https://utteranc.es/">Utterances</a>, which uses GitHub issues to store the comments, allowing me to get away with not using a VPS. However, I hope to use <a href="https://remark42.com/">Remark42</a> eventually, as it allows for anonymous comments. But until I have more reasons to get an internet-connected VPS, I will be relying on Utterances.</p>
<p>And that&rsquo;s where we are now!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 1] Core Concepts &amp; Evaluations</title>
      <link>https://cornerboxes.com/projects/lms/ttms/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cornerboxes.com/projects/lms/ttms/1/</guid>
      <description>Core Concepts Before starting with this project, I want to cover some core concepts I want. Namely:
Ease of use All commonly-performed things (e.g., adding a task, scheduling a task) should be the easiest things to do in the app. Reducing usage difficulty is key to making me stick to using it. Out of sight, out of mind. I tend to get easily distracted by what I should be doing due to excess information.</description>
      <content:encoded><![CDATA[<h1 id="core-concepts">Core Concepts</h1>
<p>Before starting with this project, I want to cover some core concepts I want. Namely:</p>
<ul>
<li>Ease of use
<ul>
<li>All commonly-performed things (e.g., adding a task, scheduling a task) should be the easiest things to do in the app.</li>
<li>Reducing usage difficulty is key to making me stick to using it.</li>
</ul>
</li>
<li>Out of sight, out of mind.
<ul>
<li>I tend to get easily distracted by what I should be doing due to excess information. Thus, for dashboards or similar screens where I only need to be aware of what I need to do next, all events that I can do nothing about should be hidden away or made less prominent.</li>
<li>The inverse is true. For example, on a task management screen, I want all the tasks I am able to complete right now to be visible so that I am aware of their existence.</li>
</ul>
</li>
<li>Multilevel Prioritization
<ul>
<li>I like to have at least two levels of priority. An example of this &ldquo;multilevel&rdquo; prioritization is having two categories, personal projects and schoolwork. Obviously, schoolwork is prioritized over personal projects. Within the schoolwork category, there could be my assignments which are prioritized by deadline or difficulty (or both), while within the personal projects category, there could be &ldquo;IoT alarm clock&rdquo; and &ldquo;Desk lamp, &quot; which are prioritized as I see fit.</li>
<li>I feel like this is necessary because I have many categories of tasks in my life, and having to prioritize all tasks in one prioritization level makes things messy.</li>
</ul>
</li>
<li>Creation + Scheduling separation
<ul>
<li>For me, I notice that I tend to have two modes when it comes to creating tasks: idea mode and scheduling mode. In idea mode, I come up with tons of discrete tasks, while in scheduling mode, I figure out when I want to execute those tasks. I think it is important to keep these two separate, as when I come up with tasks, I&rsquo;m often in situations where I don&rsquo;t want to dwell on the idea for too long (commuting, in the middle of another task, etc). Therefore, if I have to schedule it, I might do it hastily, or worse, I would skip marking the idea down altogether as it is too much of a hassle.</li>
</ul>
</li>
<li>Subtasks
<ul>
<li>I feel like it&rsquo;s important to have subtasks because one major way to reduce the friction when starting a task is to break a task down into smaller pieces. However, if I simply turn all subtasks into full tasks, it makes the system very cluttered.</li>
</ul>
</li>
</ul>
<h1 id="evaluation">Evaluation</h1>
<p>Using the core concepts discussed earlier, I will now walk through some existing systems I have attempted to use. This is going to be how I&rsquo;ll isolate some good ideas from things I have already used.</p>
<h2 id="primitive-systems">Primitive Systems</h2>
<p>These are very general concepts that have many different implementations. They can be implemented digitally or with pen and paper.</p>
<h3 id="to-do-lists">To-Do Lists</h3>
<p>Pros:</p>
<ul>
<li>Super easy to set up (both digitally and with pen and paper)</li>
<li>Easy subtasks with indentation</li>
<li>Good separation between creating and assigning tasks
<ul>
<li>No need to assign a time to the task on creation</li>
</ul>
</li>
</ul>
<p>Cons:</p>
<ul>
<li>Primarily one level of prioritization (higher up on the list = higher priority)
<ul>
<li>The only way to achieve quasi-multilevel priority is to have multiple to-do lists. However, this affects the &ldquo;out of sight, out of mind&rdquo; concept.</li>
</ul>
</li>
<li>Scheduling is not so easy and unintuitive.
<ul>
<li>When marking down a date and time along with the task, I have to mentally compare the deadline with the other tasks in the list and sort them chronologically mentally. Additionally, when done digitally, it takes quite a few clicks to set the date and time.</li>
</ul>
</li>
</ul>
<h3 id="kanban-boards">Kanban Boards</h3>
<p>Pros:</p>
<ul>
<li>My favorite visuals-wise.</li>
<li>Multilevel priority is possible
<ul>
<li>different columns = different upper priority</li>
<li>how high the card is = higher priority within the column</li>
</ul>
</li>
<li>Good separation between creating and assigning tasks for the same reason as for to-do lists.</li>
</ul>
<p>Cons:</p>
<ul>
<li>Subtasks are not easy because you can&rsquo;t really nest cards.</li>
<li>Scheduling is not easy or intuitive, for the same reasons as the to-do list.</li>
</ul>
<h3 id="calendar">Calendar</h3>
<p>Pros:</p>
<ul>
<li>Task scheduling is very easy to do and to reference because I don&rsquo;t need to mentally process any dates and times, just look at the calendar.</li>
</ul>
<p>Cons:</p>
<ul>
<li>No prioritization besides chronological ordering.</li>
<li>No separation between creating and scheduling tasks (time and date is required on task creation)</li>
<li>No subtasks</li>
<li>Either restricted view or overwhelming view
<ul>
<li>If viewing the whole month, there might be too much information, but viewing the week means you might be blindsided by a huge assignment due in the beginning of the next week.</li>
</ul>
</li>
</ul>
<h2 id="higher-level-systems">Higher-level Systems</h2>
<p>These are systems that are more like a complete service, developed by a company rather than being a concept.</p>
<h3 id="notion">Notion</h3>
<p>This is a bit more tricky to create pros and cons for because of the sheer flexibility of the system. If it isn&rsquo;t doing what you want it to do, there is always something you can do to improve it.</p>
<p>Pros:</p>
<ul>
<li>Immense flexibility, allows for the use of multiple primitive systems and tasks can be dragged across them.</li>
<li>Very easy to use.</li>
<li>Cloud synced</li>
</ul>
<p>Cons:</p>
<ul>
<li>Long setup
<ul>
<li>It&rsquo;s easy to have a general system put together, but fine-tuning it to fit my exact needs takes a lot of time.</li>
</ul>
</li>
<li>Blocks are not very integrated together.
<ul>
<li>I can set views for the same database, but dragging cards between primitive systems only moves the task, and I cannot implement more complex behavior.</li>
</ul>
</li>
<li>Some fairly basic features are not to my taste, for example, recurring tasks aren&rsquo;t very simple to set up.</li>
<li>I personally don&rsquo;t like how my data is not completely under my control.</li>
</ul>
<h1 id="stolen-concepts">Stolen Concepts</h1>
<p>From the previously evaluated concepts, I have grasped a few ideas.</p>
<ul>
<li>I believe that the kanban board can be used to essentially perform all the tasks of a to-do list and do them better. I also like how the kanban board better utilizes the 2D space of a screen, while to-do lists waste a good part of the right side of the screen.</li>
<li>I think that the calendar is essentially the gold standard in terms of scheduling. There is no beating a calendar view when it comes to figuring out how things are scheduled at a glance.</li>
<li>I really like Notion&rsquo;s interoperability between its primitive systems. Being able to drag and drop a task from a kanban into a calendar is a workflow I quite like.</li>
</ul>
<p>From this, I am more or less certain that the main TTMS interface will revolve around a hybrid interface consisting of a kanban board and a calendar, where tasks on the board are displayed both on the kanban board and the calendar.</p>
<h1 id="old-schedule">Old Schedule</h1>
<pre class="mermaid">gantt
    dateFormat  YYYY-MM-DD
    title       Project TTMS Schedule
    todayMarker off

    section Planning Stage
    Analyzing existing systems          :crit, 2023-09-24, 4d
    Analyzing digital advantages        :crit, 3d
    Reflection                          :crit, 2d
    Creating list of values             :crit, 1d
    Creating system requirements        :crit, 2d
    Creating technical requirements     :crit, 5d

    section Prototyping Stage
    Client prototype v0.1               :2023-09-28, 5d
    Server prototype v0.1               :2023-10-01, 3d
    Client prototype v0.2               :5d
    Client prototype v0.3               :2023-10-11, 10d
    Server prototype v0.2               :2023-10-11, 5d

    section Finalization Stage
    Desktop interface v1                :crit, 2023-10-21, 15d
    Server v1                           :crit, 2023-10-21, 5d
    Mobile interface v1                 :crit, 2023-10-26, 10d
    Tablet interface v1                 :2023-10-30, 5d


    section Documentation stage
    Client setup documentation          :2023-10-30, 3d
    Server setup documentation          :2023-11-02, 3d
</pre>
<p>Due to poor time management, the above was not met at all.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
