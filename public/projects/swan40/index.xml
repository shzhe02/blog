<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Swan40 on cornerboxes</title>
    <link>https://cornerboxes.com/projects/swan40/</link>
    <description>Recent content in Swan40 on cornerboxes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 15 Sep 2023 16:19:34 +0300</lastBuildDate><atom:link href="https://cornerboxes.com/projects/swan40/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Part 3] Adding a Dongle</title>
      <link>https://cornerboxes.com/projects/swan40/3/</link>
      <pubDate>Fri, 15 Sep 2023 16:19:34 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/swan40/3/</guid>
      <description>Note: This isn&amp;rsquo;t going to be an explicit guide on how to add a dongle to any ZMK board. I will create a post for that later.
Background I&amp;rsquo;ve since daily driven the Swan40 for quite a while, and it&amp;rsquo;s been working perfectly&amp;hellip; on my desktop. Since it&amp;rsquo;s been working out so well, I wanted to make another one to have on-the-go, for use with my laptop. However, this is where some problems appeared.</description>
      <content:encoded><![CDATA[<p>Note: This isn&rsquo;t going to be an explicit guide on how to add a dongle to any ZMK board. I will create a post for that later.</p>
<h1 id="background">Background</h1>
<p>I&rsquo;ve since daily driven the Swan40 for quite a while, and it&rsquo;s been working perfectly&hellip; on my desktop. Since it&rsquo;s been working out so well, I wanted to make another one to have on-the-go, for use with my laptop. However, this is where some problems appeared.</p>
<p>For some context, my laptop is running a dual-boot configuration, with Windows 11 and Fedora (Kinoite 38). I primarily use Linux and only use Windows due to certain pieces of software not working great on Linux. It has an Intel AX200 combo wireless adapter (WiFi 5 + Bluetooth 5.2).</p>
<h2 id="no-connectivity">No connectivity</h2>
<p>Due to the Swan40 being a ZMK keyboard, it&rsquo;s main communication method with any computer is over BLE. However, when I tried to pair my laptop to my Swan40, the keyboard simply did not show up in the Bluetooth scans. The Bluetooth scans showed all other devices, just not my keyboard.</p>
<h2 id="troubleshooting">Troubleshooting</h2>
<p>I tried the following:</p>
<ul>
<li>Connecting on Windows
<ul>
<li>This worked, but I rarely use Windows. This does confirm that the adapter is capable of picking up BLE devices.</li>
</ul>
</li>
<li>Unpairing on Windows and attempting to pair on Linux
<ul>
<li>This did not work.</li>
</ul>
</li>
<li>Using Blueman, Bluez-tools, Bluetuith
<ul>
<li>Bluetuith was suggested by <a href="https://github.com/zmkfirmware/zmk/issues/1487#issuecomment-1625394710">this comment in a GitHub issue about Bluetooth connectivity</a></li>
<li>This also did not work, but it eliminates the possibility that KDE&rsquo;s Bluetooth settings are broken.</li>
</ul>
</li>
</ul>
<p>At this point, I&rsquo;d given up on finding an easy solution for fixing the connectivity issues.</p>
<p>It was time for a more drastic and experimental option.</p>
<h1 id="using-a-dongle">Using a Dongle</h1>
<p>I had stumbled upon <a href="https://www.xudongz.com/blog/2020/ergoblue/">Xudong Zheng&rsquo;s ErgoBlue 2 keyboard</a> which seems to use an nRF52840 dongle running ZMK to act as an intermediary between the keyboard halves and the computer, allowing the wireless keyboard to appear as a wired one in the computer.</p>
<h2 id="why">Why?</h2>
<p>After looking into the ErgoBlue and similar boards, I discovered the following pros and cons:</p>
<p>Pros:</p>
<ul>
<li>Power savings and even battery drain.
<ul>
<li>Both keyboard halves only need to send data, in contrast to the traditional wireless split where one half has to receive data from the other half and transmit data to the computer. (Assuming both halves now act as purely peripheral halves, the [ZMK power profiiler] estimates there will be approximately a 6-8x battery life improvement.)</li>
<li>Since both halves are essentially doing the same thing now, the power drain on each half is far more even, meaning I can charge both halves at the same time every time either is running low.</li>
</ul>
</li>
<li>No more Bluetooth pairing shenanigans.
<ul>
<li>All communication between the computer and keyboard occurs over USB with the dongle, and the dongle auto-pairs with the keyboard.</li>
<li>This makes the keyboard basically plug-and-play.</li>
</ul>
</li>
</ul>
<p>Cons:</p>
<ul>
<li>The dongle is rather bulky.
<ul>
<li>Unlike other wireless dongles I have (that use proprietary 2.4Ghz protocols), the nRF52840 dongle is really large since it has lots of pins which could be used. This all goes unused as I&rsquo;m solely using it as a wireless dongle.</li>
</ul>
</li>
<li>The dongle is super exposed.
<ul>
<li>All the little components and pads on the board are really exposed, which means it&rsquo;s rather susceptible to the elements. Not great for something I&rsquo;ll be carrying all over the place.</li>
</ul>
</li>
<li>I now have to carry around an easy-to-lose dongle.</li>
</ul>
<h2 id="dongle-ifying-the-swan40">Dongle-ifying the Swan40</h2>
<p>So, I got myself a pair of nRF52840 dongles (PCA100059, v2.1.1) for about 9â‚¬ a piece.</p>
<p>Unfortunately, as BLE dongles fro ZMK are still quite obscure, a tutorial doesn&rsquo;t really exist. I used the following projects as configuration reference:</p>
<ul>
<li><a href="https://github.com/aroum/zmk-enki42-dongle">Enki42 with dongle config</a>
<ul>
<li>This uses a nice!nano v2 as the dongle, but it did help with the setting up the Kconfig files.</li>
</ul>
</li>
<li><a href="https://github.com/jibingeo/zmk-config-onekey">Onekey</a>
<ul>
<li>This uses only an nRF52840 dongle as its board. I needed this as a reference since it appears ZMK does not have a board config for this.</li>
<li>It turns out that ZMK allows for use of boards supported by Zephyr, not just the ones in ZMK. The PCA100059 board is marked as <code>nrf52840dongle_nrf52840</code> in Zephyr.</li>
<li>This also showed me the directory configuration for a custom board configuration, which seems to be missing from the ZMK docs.</li>
</ul>
</li>
</ul>
<p>At this point, I had successfully gotten the ZMK GitHub Action to export the firmware for the halves and the dongle. This took about 5 hours and&hellip; well&hellip;</p>
<p><img loading="lazy" src="/projects/swan40/3/1.webp" type="" alt="failures"  /></p>
<p>Fun.</p>
<h3 id="risky-stuff">Risky Stuff</h3>
<p>Unfortunately, I don&rsquo;t have any debuggers or extra equipment I can use to flash my dongle with a UF2 bootloader, so I was forced to use the nRF Connect software to flash stuff onto it with the DFU bootloader. However, this software only allows me to flash .hex files onto the board, while the ZMK GitHub Action exported a .bin file (even though I set the config to export a .hex file :/).</p>
<p>I&rsquo;d like to note that I have basically no idea what .bin or .hex files are besides the fact that they contain software, which when flashed to some board makes cool stuff happen.</p>
<p>Here&rsquo;s where things got a little risky. I decided to blindly search up how to convert .bin to .hex, and ChatGPT told me that <code>srec_cat</code> was something I could look into. <a href="https://carta.tech/man-pages/man1/srec_examples.1.html">This article (?)</a> helped me figure out that the command I was looking for was:</p>
<pre tabindex="0"><code>srec_cat swan40_dongle-nrf52840dongle_nrf52840-zmk.bin -binary -o dongle.hex -intel 
</code></pre><p>(By the way, I used srec_cat on Windows as nRF Connect didn&rsquo;t seem to want to play well on Linux.)</p>
<p>From my attempts at trying to load the Adafruit UF2 bootloader onto my dongle, I found out that I cannot overwrite the MBR section of the dongle, which goes from address 0x00000000 to 0x00000FFF, meaning that whatever I wanted to write had to start at 0x00001000. The <code>srec_cat</code> command I stated above would make ZMK start at 0x00000000, overlapping with the MBR section. So, I figured out that I needed to apply an offset, which I did by modifying the <code>srec_cat</code> command as follows:</p>
<pre tabindex="0"><code>srec_cat swan40_dongle-nrf52840dongle_nrf52840-zmk.bin -binary -offset 0x00001000 -o dongle.hex -intel 
</code></pre><p>Somehow, that actually worked, and by some miracle, i didn&rsquo;t have to brick anything in the process of figuring that out.</p>
<h3 id="troubleshooting-1">Troubleshooting</h3>
<p>Right off the bat, the keyboard just refused to connect to the dongle. I later discovered that I need to have an <code>#include &quot;Swan40.dtsi&quot;</code> even for the dongle overlay, otherwise things just did not want to pair.</p>
<p>After getting the dongle to actually attempt to pair with the keyboard halves, it turns out the keyboard only works if I flash the settings_reset UF2 firmware onto the halves before loading the actual firmware, but the halves immediately failed to connect the moment the dongle was unplugged and replugged into the computer.</p>
<p>With some help from @bravekarma and @petejohanson on the ZMK Discord server, it turns out that (supposedly) the keymap was only being stored in the dongle&rsquo;s memory, causing it to be erased when unpowered. After taking some of the settings from the <a href="https://github.com/zmkfirmware/zmk/blob/main/app/boards/nrf52840dk_nrf52840.conf">nRF52840-DK ZMK board configuration</a>, the dongle now works as a plug-and-play device.</p>
<h1 id="the-end">The End?</h1>
<p>This marks the end of the Swan40 v1. Oh, but what&rsquo;s that? I smell a v1.1&hellip;</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 2] Designing the Keyboard</title>
      <link>https://cornerboxes.com/projects/swan40/2/</link>
      <pubDate>Mon, 07 Aug 2023 21:58:25 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/swan40/2/</guid>
      <description>Tricks In my goals for this project, my number one goal was really the battery life. However, on a tiny split keyboard, I have not seen any good battery mounting methods that do not involve tenting the keyboard to make space below it or having it on the side. I want the battery to be part of the keyboard such that the keyboard&amp;rsquo;s physical footprint doesn&amp;rsquo;t have to extend too much to accommodate for it.</description>
      <content:encoded><![CDATA[<h2 id="tricks">Tricks</h2>
<p>In my goals for this project, my number one goal was really the battery life. However, on a tiny split keyboard, I have not seen any good battery mounting methods that do not involve tenting the keyboard to make space below it or having it on the side. I want the battery to be part of the keyboard such that the keyboard&rsquo;s physical footprint doesn&rsquo;t have to extend too much to accommodate for it.</p>
<p>In conventional wireless split keyboards, the battery is placed under the microcontroller, which is usually above the thumb keys. This approach means that the battery is basically completely hidden, which is aesthetically pleasing, but the problem is that the biggest battery that can really fit under the microcontroller only has a capacity of 150mAh. Using the <a href="https://zmk.dev/power-profiler">ZMK Power Profiler</a>, we can estimate that the battery life of the central half will only be around 2 weeks (given a nice!nano v2 and the default parameters for everything else), which is far too short in my opinion.</p>
<p>Putting the battery under the keyboard is out of the question, since:</p>
<ol>
<li>There are many sharp points under the PCB, risking battery damage.</li>
<li>I will have to tent the keyboard, which I don&rsquo;t want to do.</li>
</ol>
<p>So, my solution was to scrap using conventional pro-micro-sized boards and use the XIAO nRF52840. This allows me to do several things:</p>
<ul>
<li>The board features holes which also have castellated holes on the side, meaning that I am able to mount this to a PCB like an SMD component rather than having to use pins.</li>
<li>Saves money (compared to the nice!nano v2).</li>
</ul>
<p>However, mounting it like an SMD component comes with more challenges. The main one being that the XIAO microcontroller has SMD pads on the back for, among other things, the battery inputs. This makes things difficult since I can&rsquo;t simply solder the microcontroller to the PCB like a normal SMD component unless I want to cut off my access to the battery pads. My solution? Mount the microcontroller right-side-up, but UNDER the keyboard PCB, then cut away the part of the PCB between the pads. This is possible since the pads/holes on the microcontroller are on both sides of the microcontroller.</p>
<p>Top view:
<img loading="lazy" src="/projects/swan40/2/1.webp" type="" alt="Top view"  /></p>
<p>Bottom view:
<img loading="lazy" src="/projects/swan40/2/2.webp" type="" alt="Bottom view"  /></p>
<h2 id="kicad">KiCAD</h2>
<p>KiCAD was my software of choice for designing the keyboard. After using it for a while, I feel like it is a rather robust PCB design software, and I had little to no difficulty getting a feel for it.</p>
<p>Due to my trick that I mentioned above, I have to also customize the XIAO footprint in the software such that the pads are designed to be used with an upside-down microcontroller.</p>
<p>It also turns out that I knew basically nothing about PCBs, and it took a long time for me to come across the term &ldquo;via&rdquo;. In case you don&rsquo;t know, a via is essentially a plated hole which allows traces from one side of the board to connect to traces on the other side of the board. This is super useful for wiring, since I can essentially weave my way around traces without having to worry about leaving space for other traces.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 1] Goals</title>
      <link>https://cornerboxes.com/projects/swan40/1/</link>
      <pubDate>Mon, 07 Aug 2023 17:07:23 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/swan40/1/</guid>
      <description>Note: You can find the relevant files of this project in the Swan40 GitHub repository.
Goals Hardware On-off switch (Like the Corne) There should be a switch to disconnect the battery on the hardware level. Usage of a XIAO nRF52840 It should utilize Seeed Studio&amp;rsquo;s XIAO nRF52840 as the controller. (This was a cost-cutting measure; the nice!nano, a commonly used bluetooth microcontroller, costs about 26â‚¬ a piece excl. shipping, while this board costs only $10.</description>
      <content:encoded><![CDATA[<p>Note: You can find the relevant files of this project in the <a href="https://github.com/shzhe02/Swan40">Swan40 GitHub repository</a>.</p>
<h2 id="goals">Goals</h2>
<h3 id="hardware">Hardware</h3>
<ul>
<li>On-off switch (Like the Corne)
<ul>
<li>There should be a switch to disconnect the battery on the hardware level.</li>
</ul>
</li>
<li>Usage of a XIAO nRF52840
<ul>
<li>It should utilize Seeed Studio&rsquo;s XIAO nRF52840 as the controller.</li>
<li>(This was a cost-cutting measure; the nice!nano, a commonly used bluetooth microcontroller, costs about 26â‚¬ a piece excl. shipping, while this board costs only $10.)</li>
</ul>
</li>
</ul>
<h3 id="software">Software</h3>
<ul>
<li>ZMK
<ul>
<li>It should use ZMK as its firmware.</li>
</ul>
</li>
</ul>
<h3 id="design">Design</h3>
<ul>
<li>Large and flexible battery capacity
<ul>
<li>The PCB should allow for mounting of large and small batteries.</li>
<li>There should be at least two battery mounting options.</li>
<li>The battery mounting spots should be able to accommodate up to 1000mAh LiPo batteries.</li>
</ul>
</li>
<li>3D-printed case
<ul>
<li>It should be possible to mount the board in a 3D-printed case which does not tilt or raise the PCB significantly.</li>
</ul>
</li>
<li>Melted PCB traces
<ul>
<li>The traces should be melted using the <a href="https://github.com/mitxela/kicad-round-tracks">Round Tracks</a> plugin. (Because it&rsquo;s cool!)</li>
</ul>
</li>
<li>Aggressive column stagger (Like the Ferris Sweep)
<ul>
<li>The column for the pinky finger should be aggressively staggered.</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Part 0] Me and Keyboards</title>
      <link>https://cornerboxes.com/projects/swan40/0/</link>
      <pubDate>Tue, 01 Aug 2023 02:20:12 +0300</pubDate>
      
      <guid>https://cornerboxes.com/projects/swan40/0/</guid>
      <description>Disclaimer This is not intended for the average reader. Lots of keyboard jargon is used for the sake of convenience.
A Little Background Just skip to the next post if you don&amp;rsquo;t want to hear my life&amp;rsquo;s story :D
I&amp;rsquo;m really into keyboards. In particular, mechanical keyboards.
I started just about how most people enter this space: &amp;ldquo;Clicky keyboards are cool&amp;rdquo;. Well, that is, until they were annoying. Since then, I&amp;rsquo;ve been on and endless pursuit of the &amp;ldquo;perfect&amp;rdquo; keyboard.</description>
      <content:encoded><![CDATA[<h2 id="disclaimer">Disclaimer</h2>
<p>This is not intended for the average reader. Lots of keyboard jargon is used for the sake of convenience.</p>
<h2 id="a-little-background">A Little Background</h2>
<p>Just skip to the next post if you don&rsquo;t want to hear my life&rsquo;s story :D</p>
<p>I&rsquo;m really into keyboards. In particular, mechanical keyboards.</p>
<p>I started just about how most people enter this space: &ldquo;Clicky keyboards are cool&rdquo;. Well, that is, until they were annoying. Since then, I&rsquo;ve been on and endless pursuit of the &ldquo;perfect&rdquo; keyboard. Here&rsquo;s a brief timeline, with my Typeracer speeds attached:</p>
<ul>
<li>2018 - 50 WPM
<ul>
<li>First keyboard obtained, generic 105-key mechanical keyboard with Outemu Blue switches.</li>
</ul>
</li>
<li>2019 - 70 WPM
<ul>
<li>The blue switches really got on my nerves, but I didn&rsquo;t want to purchase a whole other keyboard, so I ended up getting some Gateron Brown switches, desoldered all my blue switches and replaced them.</li>
</ul>
</li>
<li>2020 - 80 WPM
<ul>
<li>While trying to play games, I noticed that my keyboard took too much space, causing me to ram my mouse into it unintentionally fairly often. I decided to finally switch to an Anne Pro 2 (a 60% keyboard) with Kailh Box Red switches. Definitely a great upgrade, and it was my introduction to the world of keyboard form factors.</li>
</ul>
</li>
<li>2022 - 95 WPM
<ul>
<li>June: I decided to get an &ldquo;endgame&rdquo; keyboard, the Akko MOD008. Unfortunately, this turned out to be a rather costly mistake, since it turned out that all the effort I went through to modify the keyboard to make it sound fantastic was voided the moment I wore my headphones while using my computer. However, I did learn quite a bit about material choices and acoustics, which meant this endeavor wasn&rsquo;t completely in vain.</li>
</ul>
</li>
</ul>
<p>Now, this is where things get a little interesting.</p>
<p>In October 2022, I started to notice that my typing style became a limiting factor in my typing. For some context, I learnt typing in a rather weird way: chatting in a Minecraft server about Redstone engineering (That&rsquo;s a story for another time). This meant that I learned to type with my left hand starting from the WASD-SHIFT-SPACEBAR hand position, which meant that my left hand had to leap all over the place. This caused an awful lot of errors while typing, but muscle memory built up over time and I got pretty fast at it.</p>
<p>However, I really wanted to crack that 100 WPM barrier consistently, and I felt that I could not continue that much further with my current typing style. For a short period of time, I tried out the conventional way of typing, using the home row. It felt extremely foreign to me, and due to the row stagger of conventional keyboards, I had to tilt my left hand unnaturally far inward, which felt extremely uncomfortable. I eventually gave up not just because of the awkward hand posture, but also because it was extremely difficult to undo my last decade&rsquo;s worth of muscle memory.</p>
<p>At this point, I started to prioritize typing comfort over typing speed. In pursuit of this, I was introduced to the world of fully-custom split keyboards. With the sheer number of options available, I was ready to tackle a challenge in my typing.</p>
<p>So, in my previous attempt at improving comfort, muscle memory got in the way. To avoid that happening this time, I wanted to switch as many things as I could up. Here were the features I looked for:</p>
<ul>
<li>Split keyboard
<ul>
<li>No more bending wrists inward when I can now have my hands at arbitrary angles.</li>
</ul>
</li>
<li>Friendship ended with row stagger, now column stagger is my best friend
<ul>
<li>No need to have my fingers extend diagonally anymore.</li>
</ul>
</li>
<li>Entering the 40-50% space
<ul>
<li>Less keys = less movement to reach any given key</li>
</ul>
</li>
<li>Colemak-DHm as the new keyboard layout
<ul>
<li>Qwerty tends to use the row above the home row quite a bit. <a href="https://www.slant.co/versus/1595/21371/~qwerty_vs_colemak-mod-dh">Here&rsquo;s a pretty nice comparison.</a> There&rsquo;s also lots more that&rsquo;s fantastic about the DHm variant, which you can read about in more detail <a href="https://colemakmods.github.io/mod-dh/">here</a> if you are interested.</li>
</ul>
</li>
</ul>
<p>That led me to the <a href="https://github.com/foostan/crkbd">Corne</a>, which I&rsquo;ve found to work fantastic for my use case. I was using it on and off starting in October, but I decided to fully commit to it in December. It&rsquo;s now July 2023, which means I&rsquo;ve been using this as my main keyboard for about 8 months. I&rsquo;ve recovered my typing speed to around 80-90 WPM, which is plenty in daily use cases, since I can&rsquo;t even thing about things to type that quickly. And the icing on the cake is: I can seamlessly switch between Qwerty and Colemak-DHm! In fact, my Qwerty speed has somehow increased to about 110 WPM.</p>
<h2 id="next-steps">Next steps</h2>
<p>Well, with that happy ending, why does this project exist? Haven&rsquo;t I found the perfect keyboard? Well, around May 2023, I also built a similar split keyboard called the <a href="https://github.com/davidphilipbarr/Sweep">Ferris Sweep</a>. It has only 34 keys, which is even fewer than my Corne&rsquo;s 42! In addition, there are a few more features that were present in that board that I really wanted:</p>
<ul>
<li>Much tighter spacing between the keys</li>
<li>Fully wireless via Bluetooth</li>
<li>More aggressive column stagger</li>
</ul>
<p>That said, I still do like certain things about my Corne more:</p>
<ul>
<li>More keys! (34 is just way too few that I have to use fancy features to use the keyboard to fulfill my daily needs)</li>
<li>It has a plate (It makes the switches, and therefore the keys, much more stable.)</li>
</ul>
<p>And thus, I decided to create a compromise between the two, with additional added features to customize it to my liking!</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
