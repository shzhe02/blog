<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Miscellaneous on cornerboxes</title>
    <link>https://cornerboxes.com/misc/</link>
    <description>Recent content in Miscellaneous on cornerboxes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 11 Jul 2023 13:11:22 +0300</lastBuildDate><atom:link href="https://cornerboxes.com/misc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Nushell to run in an Alpine Linux container</title>
      <link>https://cornerboxes.com/misc/alpine-toolbx-nushell-starship/</link>
      <pubDate>Tue, 11 Jul 2023 13:11:22 +0300</pubDate>
      
      <guid>https://cornerboxes.com/misc/alpine-toolbx-nushell-starship/</guid>
      <description>From my post about my digital setup, I wanted to quickly write a small post about getting nushell and starship working in an Alpine Linux Toolbx container.
So, the problem is that Alpine Linux uses the musl C library instead of glibc. This causes a compatibility problem when running Rust programs that were compiled on the main system within the Alpine Linux container. In addition, the PATH environment variable is inherited from the host system due to how Toolbx works.</description>
      <content:encoded><![CDATA[<p>From my post about my digital setup, I wanted to quickly write a small post about getting nushell and starship working in an Alpine Linux <a href="https://containertoolbx.org/">Toolbx</a> container.</p>
<p>So, the problem is that Alpine Linux uses the musl C library instead of glibc. This causes a compatibility problem when running Rust programs that were compiled on the main system within the Alpine Linux container. In addition, the PATH environment variable is inherited from the host system due to how Toolbx works.</p>
<p>Here&rsquo;s the workaround I found that seems to work:</p>
<ul>
<li>Inside the Alpine Linux container:
<ul>
<li>Enable the <code>testing</code> repository</li>
<li>Install both starship and nushell using the apk package manager.</li>
<li>In the file <code>~/.cache/starship/init.nu</code>, replace all occurrences of <code>^/home/&lt;user&gt;/.cargo/bin/starship</code> to just <code>starship</code>, and make sure that the starship executable is in the system path.</li>
</ul>
</li>
<li>On the host system:
<ul>
<li>Find the cargo env file located at <code>~/.cargo/env</code></li>
<li>Edit the line with <code>export PATH</code> such that it appends the <code>~/.cargo/bin</code> directory to the path instead of prepending it.
<ul>
<li>As the container will inherit the PATH from the host system, the <code>nu</code> and <code>starship</code> executables within the <code>~/.cargo/bin</code> directory will be deprioritized, allowing the system packages to take priority.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>However, one problem with this workaround is that when using <code>toolbox enter &lt;alpine linux container name&gt;</code> from nushell on the host system, it will try continuing to use the same nushell executable that&rsquo;s currently being used by the host system within the container. To work around this, you should first create a bash session with <code>bash</code>, then entering your toolbx container, and then using <code>nu</code> to start up nushell.</p>
<p>P.S. Since this is me trying to backtrack what I did, I may have left out some things. If it doesn&rsquo;t work out for you, please make a comment.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>My Digital Setup</title>
      <link>https://cornerboxes.com/misc/setup/</link>
      <pubDate>Tue, 11 Jul 2023 12:27:05 +0300</pubDate>
      
      <guid>https://cornerboxes.com/misc/setup/</guid>
      <description>I really enjoy semi-obscure technologies, and I try implementing many of them into my own computer. So, I thought it would be a little fun to make a little write-up about what components my setup consists of and why they exist.
Setup v1 (as of 2023-07-11) (I&amp;rsquo;ll add a diagram here later, but for now, here&amp;rsquo;s a bullet-point representation)
Main desktop Running Fedora Kinoite 38 Runs 3 containers (via Toolbx) Dev container Running Fedora 38 (container version) Contains all the additional packages I need for software development Play container Running Fedora 38 (container version) Primarily for running games (on Steam) Utils container Running Alpine Linux Edge (container version) Home server (repurposed old laptop) Running Rocky Linux 9 Runs 3 containers (Podman + podman-compose) Nextcloud Penpot Forgejo All 3 containers are connected to a subdomain of mine via Cloudflare Tunnels As for some personal preferences:</description>
      <content:encoded><![CDATA[<p>I really enjoy semi-obscure technologies, and I try implementing many of them into my own computer. So, I thought it would be a little fun to make a little write-up about what components my setup consists of and why they exist.</p>
<h1 id="setup-v1-as-of-2023-07-11">Setup v1 (as of 2023-07-11)</h1>
<p>(I&rsquo;ll add a diagram here later, but for now, here&rsquo;s a bullet-point representation)</p>
<ul>
<li>Main desktop
<ul>
<li>Running Fedora Kinoite 38</li>
<li>Runs 3 containers (via Toolbx)
<ul>
<li>Dev container
<ul>
<li>Running Fedora 38 (container version)</li>
<li>Contains all the additional packages I need for software development</li>
</ul>
</li>
<li>Play container
<ul>
<li>Running Fedora 38 (container version)</li>
<li>Primarily for running games (on Steam)</li>
</ul>
</li>
<li>Utils container
<ul>
<li>Running Alpine Linux Edge (container version)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Home server (repurposed old laptop)
<ul>
<li>Running Rocky Linux 9</li>
<li>Runs 3 containers (Podman + podman-compose)
<ul>
<li>Nextcloud</li>
<li>Penpot</li>
<li>Forgejo</li>
</ul>
</li>
<li>All 3 containers are connected to a subdomain of mine via Cloudflare Tunnels</li>
</ul>
</li>
</ul>
<p>As for some personal preferences:</p>
<ul>
<li>Preferred shell: <a href="https://nushell.sh">nushell</a></li>
<li>Preferred terminal multiplexer: <a href="https://zellij.dev">zellij</a></li>
<li>Preferred terminal emulator: <a href="https://alacritty.org">alacritty</a></li>
</ul>
<hr>
<h1 id="some-explanation">Some explanation</h1>
<p>Now that you&rsquo;ve seen what the setup consist of, I&rsquo;ll try walking through some of my choices.</p>
<h2 id="distro-choices">Distro choices?</h2>
<h3 id="main-desktop">Main desktop</h3>
<p>I went with Kinoite due to the following reasons:</p>
<ul>
<li>KDE is just what I&rsquo;m used to.</li>
<li>Containerized workflow
<ul>
<li>If I mess up setting up a new environment for whatever purpose, I can just delete the whole container and start a new one up from my last custom image.</li>
</ul>
</li>
<li>Atomic
<ul>
<li>I find the rpm-ostree package manager (?) really cool! I like how I can just pin versions of my system and reboot to them in the future if needed. This also brings about better system stability.</li>
</ul>
</li>
<li>Fedora-ish
<ul>
<li>Since prior to this, I&rsquo;ve been using Fedora 36, 37 and 38, I wanted to still have something from the Fedora ecosystem. I also wanted to have the almost bleeding-edge package updates while maintaining pretty good stability (which is why I didn&rsquo;t go for RHEL or similar).</li>
</ul>
</li>
<li>Why not?
<ul>
<li>Heck, it&rsquo;s free! And if it&rsquo;s more complicated, that just means more things to learn :D</li>
</ul>
</li>
</ul>
<h3 id="home-server">Home server</h3>
<p>I just wanted something stable so I could just chuck my laptop on a shelf and have it run 24/7 with no issues. From some research, it seemed like RHEL was the gold standard for stability, but since I like open-source, I went with one of its derivatives, Rocky Linux 9.</p>
<h2 id="whats-with-my-preferences">What&rsquo;s with my preferences?</h2>
<p>&hellip;I&rsquo;m totally not biased towards applications built with Rust&hellip;</p>
<h3 id="nushell">Nushell</h3>
<p>Nushell may not be the most well-supported shell out there, but since I am more of a casual Linux user, I care more about my experience more over raw utility. The main reasons why I just went with nushell is because of the super pretty error messages and the structured responses for many commands.</p>
<p>Additionally, I can couple this with <a href="https://starship.rs">Starship</a> and have super pretty terminal prompts!</p>
<p>Extra: If I ever need to, I can always just type <code>bash</code> and do what I need to do.</p>
<h3 id="zellij">Zellij</h3>
<p>I previously tried tmux, but didn&rsquo;t really find it very easy to use. I ended up discovering Zellij from a recommendation, and it basically lets me do everything I need it to do. All the controls are on-screen, so I don&rsquo;t really have to memorize them.</p>
<p>I&rsquo;m also not really a multiplexer power user, so just the function of multiple panes is basically the only thing I need.</p>
<p>If I ever need better aesthetics, I also have the option to remove unnecessary portions of the interface to make it look super minimal like tmux.</p>
<h3 id="alacritty">Alacritty</h3>
<p>Although Konsole (the default emulator that comes with KDE Plasma) works, I wanted a little less clutter. Alacritty just works, feels very responsive, and only contains the terminal itself with no extra buttons.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Exchange Journal</title>
      <link>https://cornerboxes.com/misc/exchange/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cornerboxes.com/misc/exchange/</guid>
      <description>About my experience of going on an exchange semester at the National University of Singapore for the 2nd semester of the 2023/2024 academic year.</description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
  </channel>
</rss>
